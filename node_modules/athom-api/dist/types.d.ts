declare namespace AthomAppsAPI {
    /**
     *
     * @memberof AthomAppsAPI
     * @property { string } id
     * @hideconstructor
     */
    class App {
        id: string;
    }
    /**
     *
     * @memberof AthomAppsAPI
     * @property { string } id
     * @hideconstructor
     */
    class Build {
        id: string;
    }
    /**
     *
     * @memberof AthomAppsAPI
     * @property { number } rating
     * @hideconstructor
     */
    class Review {
        rating: number;
    }
}

declare namespace AthomCallbackAPI {
    /**
     *
     * @memberof AthomCallbackAPI
     * @property { boolean } success
     * @property { string } message
     * @hideconstructor
     */
    class Error {
        success: boolean;
        message: string;
    }
}

declare namespace AthomCloudAPI {
    /**
     *
     * @memberof AthomCloudAPI
     * @property { number } code
     * @property { string } error
     * @property { string } error_description
     * @hideconstructor
     */
    class Error {
        code: number;
        error: string;
        error_description: string;
    }
    /**
     * OAuth2 credentials payload
     * @memberof AthomCloudAPI
     * @property { string } token_type  ("bearer")
     * @property { string } access_token Access token
     * @property { number } expires_in Access token lifespan in seconds
     * @property { string } refresh_token Refresh token. Can be used within 14 days after issue.
     * @hideconstructor
     */
    class Token {
        /**
         * ("bearer")
        */
        token_type: string;
        /**
         * Access token
        */
        access_token: string;
        /**
         * Access token lifespan in seconds
        */
        expires_in: number;
        /**
         * Refresh token. Can be used within 14 days after issue.
        */
        refresh_token: string;
    }
    /**
     * User role definition
     * @memberof AthomCloudAPI
     * @property { string } _id Role ID
     * @property { string } name Human-readable name
     * @property { string[] } scopes Assigned scopes
     * @hideconstructor
     */
    class Role {
        /**
         * Role ID
        */
        _id: string;
        /**
         * Human-readable name
        */
        name: string;
        /**
         * Assigned scopes
        */
        scopes: string[];
    }
    /**
     *
     * @memberof AthomCloudAPI
     * @property { string } _id
     * @property { string } firstname First name
     * @property { string } lastname Last name
     * @property { string[] } roleIds Assumed role IDs
     * @property { AthomCloudAPI.Avatar } avatar
     * @hideconstructor
     */
    class UserProfile {
        _id: string;
        /**
         * First name
        */
        firstname: string;
        /**
         * Last name
        */
        lastname: string;
        /**
         * Assumed role IDs
        */
        roleIds: string[];
        avatar: AthomCloudAPI.Avatar;
    }
    /**
     * Avatar URLs
     * @memberof AthomCloudAPI
     * @property { string } small Avatar URL - small
     * @property { string } medium Avatar URL - medium
     * @property { string } large Avatar URL - large
     * @hideconstructor
     */
    class Avatar {
        /**
         * Avatar URL - small
        */
        small: string;
        /**
         * Avatar URL - medium
        */
        medium: string;
        /**
         * Avatar URL - large
        */
        large: string;
    }
    /**
     *
     * @memberof AthomCloudAPI
     * @property { string } _id
     * @property { string } firstname First name
     * @property { string } lastname Last name
     * @property { string } email Email address
     * @property { string } language Language
     * @property { AthomCloudAPI.Role[] } roles Assumed roles (Only present on single-fetch responses)
     * @property { string[] } roleIds Assumed role IDs
     * @property { AthomCloudAPI.Avatar } avatar
     * @property { AthomCloudAPI.Homey[] } homeys Homeys the user has access to
     * @property { AthomCloudAPI.UserDevice[] } devices Linked devices
     * @hideconstructor
     */
    class User {
        /**
         * Returns a list of Homeys the current user has access to
         * @param {object} [filter] A filter object
         * @returns {AthomCloudAPI.Homey[]} List of Homey objects.
         */
        getHomeys(filter?: any): AthomCloudAPI.Homey[];
        /**
         * Returns a Homey by ID (if the user has access) or throws an error
         * @param {string} id The Homey ID to retrieve
         * @returns {AthomCloudAPI.Homey} The Homey
         */
        getHomeyById(id: string): AthomCloudAPI.Homey;
        /**
         * Returns the first Homey we can access or throws an error
         * @returns {AthomCloudAPI.Homey} The Homey
         */
        getFirstHomey(): AthomCloudAPI.Homey;
        /**
         * Gets a device by id
         * @param id
         */
        getDevice(id: any): void;
        _id: string;
        /**
         * First name
        */
        firstname: string;
        /**
         * Last name
        */
        lastname: string;
        /**
         * Email address
        */
        email: string;
        /**
         * Language
        */
        language: string;
        /**
         * Assumed roles (Only present on single-fetch responses)
        */
        roles: AthomCloudAPI.Role[];
        /**
         * Assumed role IDs
        */
        roleIds: string[];
        avatar: AthomCloudAPI.Avatar;
        /**
         * Homeys the user has access to
        */
        homeys: AthomCloudAPI.Homey[];
        /**
         * Linked devices
        */
        devices: AthomCloudAPI.UserDevice[];
    }
    /**
     *
     * @memberof AthomCloudAPI
     * @property { string } _id
     * @property { string } name
     * @property { string } platform  ("ios" | "android")
     * @property { string } token
     * @property { string } publicKey
     * @property { string } appVersion
     * @property { string } osVersion
     * @property { string } created
     * @property { string } updated
     * @property { boolean } devmode
     * @hideconstructor
     */
    class UserDevice {
        _id: string;
        name: string;
        /**
         * ("ios" | "android")
        */
        platform: string;
        token: string;
        publicKey: string;
        appVersion: string;
        osVersion: string;
        created: string;
        updated: string;
        devmode: boolean;
    }
    /**
     * User address details
     * @memberof AthomCloudAPI
     * @property { string } street
     * @property { string } number
     * @property { string } zipcode
     * @property { string } city
     * @property { string } state
     * @property { string } country
     * @property { string } extra
     * @property { string } firstname
     * @property { string } lastname
     * @hideconstructor
     */
    class UserAddress {
        street: string;
        number: string;
        zipcode: string;
        city: string;
        state: string;
        country: string;
        extra: string;
        firstname: string;
        lastname: string;
    }
    /**
     * User subscription details
     * @memberof AthomCloudAPI
     * @property { number } expiresAt
     * @property { number } startedAt
     * @property { boolean } autoRenew
     * @hideconstructor
     */
    class UserSubscription {
        expiresAt: number;
        startedAt: number;
        autoRenew: boolean;
    }
    /**
     *
     * @memberof AthomCloudAPI
     * @property { string } _id
     * @property { string } serial Unique Serial Number
     * @property { number } build Firmware Version
     * @property { number[] } zwaveCalibration Z-Wave Calibration Value
     * @property { string } manufacturedAt Manufactured Date
     * @property { object[] } activationHistory Activation Dates
     * @hideconstructor
     */
    class Bridge {
        _id: string;
        /**
         * Unique Serial Number
        */
        serial: string;
        /**
         * Firmware Version
        */
        build: number;
        /**
         * Z-Wave Calibration Value
        */
        zwaveCalibration: number[];
        /**
         * Manufactured Date
        */
        manufacturedAt: string;
        /**
         * Activation Dates
        */
        activationHistory: object[];
    }
    /**
     *
     * @memberof AthomCloudAPI
     * @property { string } _id
     * @property { string } name Human-readable name
     * @property { string } ipInternal IP in local network (not cached)
     * @property { string } ipExternal External IP (not cached)
     * @property { string } ipExternalCountry External IP Country (not cached)
     * @property { number } ipExternalPort External IP Port (not cached)
     * @property { string } localUrl HTTP URL to connect to homey locally
     * @property { string } localUrlSecure HTTPS URL to connect to homey locally
     * @property { string } remoteUrl HTTPS URL to connect to homey remotely
     * @property { number } apiVersion API level to use for this Homey
     * @property { string } softwareVersion Installed software version
     * @property { string } language Configured language
     * @property { string } state Power status
     * @property { object } geolocation Location information
     * @property { object[] } users Authorized users (not cached)
     * @property { AthomCloudAPI.User } users.user
     * @property { string } users.userId The user's ID
     * @property { string } users.role User's assumed role on Homey
     * @property { string } role Current user's assumed role on Homey
     * @property { string } token Current user\'s Homey access token (V1-only)
     * @property { object[] } apps Installed apps (not cached)
     * @property { string } apps.id App ID
     * @property { string } apps.version Installed version
     * @property { string } apps.channel Subscribed channel
     * @property { object[] } devices Installed devices
     * @property { string } devices.driverId Driver ID
     * @property { number } devices.count Number of installed devices
     * @hideconstructor
     */
    class Homey {
        /**
         * Logs in to this Homey
         * @param {object} [opts]
         * @param {string[]} [opts.strategy] - A list of connection strategies ('localSecure'|'local'|'cloud'|'mdns')
         * @param {string} [opts.token] - A custom bearer token
         * @returns {HomeyAPI} An HomeyAPI instance to communicate with this homey
         */
        authenticate(opts?: {
            strategy?: string[];
            token?: string;
        }): HomeyAPI;
        /**
         * Updates Homey metadata
         * @param {string} key - The metadata field to update
         * @param {object} value - The value to set the field to
         * @protected
         */
        protected setMetadata(key: string, value: any): void;
        /**
         * Updates this Homey
         * @param {object} properties - A key, value mapping of the properties to update
         * @protected
         */
        protected update(properties: any): void;
        /**
         * Returns the oAuth2 resource ID of this Homey
         */
        resourceId: any;
        _id: string;
        /**
         * Human-readable name
        */
        name: string;
        /**
         * IP in local network (not cached)
        */
        ipInternal: string;
        /**
         * External IP (not cached)
        */
        ipExternal: string;
        /**
         * External IP Country (not cached)
        */
        ipExternalCountry: string;
        /**
         * External IP Port (not cached)
        */
        ipExternalPort: number;
        /**
         * HTTP URL to connect to homey locally
        */
        localUrl: string;
        /**
         * HTTPS URL to connect to homey locally
        */
        localUrlSecure: string;
        /**
         * HTTPS URL to connect to homey remotely
        */
        remoteUrl: string;
        /**
         * API level to use for this Homey
        */
        apiVersion: number;
        /**
         * Installed software version
        */
        softwareVersion: string;
        /**
         * Configured language
        */
        language: string;
        /**
         * Power status
        */
        state: string;
        /**
         * Location information
        */
        geolocation: any;
        /**
         * Authorized users (not cached)
        */
        users: {
            user: AthomCloudAPI.User;
            userId: string;
            role: string;
        };
        /**
         * Current user's assumed role on Homey
        */
        role: string;
        /**
         * Current user\'s Homey access token (V1-only)
        */
        token: string;
        /**
         * Installed apps (not cached)
        */
        apps: {
            id: string;
            version: string;
            channel: string;
        };
        /**
         * Installed devices
        */
        devices: {
            driverId: string;
            count: number;
        };
    }
    /**
     * Homey metadata (key-value pairs)
     * @memberof AthomCloudAPI
     * @hideconstructor
     */
    class HomeyMetadata {
    }
}

declare namespace AthomConnectAPI {
    /**
     *
     * @memberof AthomConnectAPI
     * @property { boolean } success
     * @property { string } message
     * @hideconstructor
     */
    class Error {
        success: boolean;
        message: string;
    }
}

declare namespace AthomFirmwareAPI {
    /**
     *
     * @memberof AthomFirmwareAPI
     * @property { boolean } success
     * @property { string } message
     * @hideconstructor
     */
    class Error {
        success: boolean;
        message: string;
    }
}

declare namespace AthomSetupAPI {
    /**
     *
     * @memberof AthomSetupAPI
     * @property { boolean } success
     * @property { string } message
     * @hideconstructor
     */
    class Error {
        success: boolean;
        message: string;
    }
}

declare namespace AthomWebhooksAPI {
    /**
     *
     * @memberof AthomWebhooksAPI
     * @property { boolean } success
     * @property { string } message
     * @hideconstructor
     */
    class Error {
        success: boolean;
        message: string;
    }
    /**
     *
     * @memberof AthomWebhooksAPI
     * @property { string } id
     * @property { string } secret
     * @property { string } name
     * @property { string } fn
     * @property { string } keyPath
     * @property { number } fired
     * @hideconstructor
     */
    class Webhook {
        id: string;
        secret: string;
        name: string;
        fn: string;
        keyPath: string;
        fired: number;
    }
}

declare class HomeyAPI {
    /**
     * @memberof HomeyAPI#
     * @member { HomeyAPI.ManagerAlarms } alarms
     */
    alarms: HomeyAPI.ManagerAlarms;
    /**
     * @memberof HomeyAPI#
     * @member { HomeyAPI.ManagerApps } apps
     */
    apps: HomeyAPI.ManagerApps;
    /**
     * @memberof HomeyAPI#
     * @member { HomeyAPI.ManagerAudio } audio
     */
    audio: HomeyAPI.ManagerAudio;
    /**
     * @memberof HomeyAPI#
     * @member { HomeyAPI.ManagerBackup } backup
     */
    backup: HomeyAPI.ManagerBackup;
    /**
     * @memberof HomeyAPI#
     * @member { HomeyAPI.ManagerBLE } ble
     */
    ble: HomeyAPI.ManagerBLE;
    /**
     * @memberof HomeyAPI#
     * @member { HomeyAPI.ManagerCloud } cloud
     */
    cloud: HomeyAPI.ManagerCloud;
    /**
     * @memberof HomeyAPI#
     * @member { HomeyAPI.ManagerCoprocessor } coprocessor
     */
    coprocessor: HomeyAPI.ManagerCoprocessor;
    /**
     * @memberof HomeyAPI#
     * @member { HomeyAPI.ManagerDashboards } dashboards
     */
    dashboards: HomeyAPI.ManagerDashboards;
    /**
     * @memberof HomeyAPI#
     * @member { HomeyAPI.ManagerDatabase } database
     */
    database: HomeyAPI.ManagerDatabase;
    /**
     * @memberof HomeyAPI#
     * @member { HomeyAPI.ManagerDevices } devices
     */
    devices: HomeyAPI.ManagerDevices;
    /**
     * @memberof HomeyAPI#
     * @member { HomeyAPI.ManagerDevkit } devkit
     */
    devkit: HomeyAPI.ManagerDevkit;
    /**
     * @memberof HomeyAPI#
     * @member { HomeyAPI.ManagerDrivers } drivers
     */
    drivers: HomeyAPI.ManagerDrivers;
    /**
     * @memberof HomeyAPI#
     * @member { HomeyAPI.ManagerEnergy } energy
     */
    energy: HomeyAPI.ManagerEnergy;
    /**
     * @memberof HomeyAPI#
     * @member { HomeyAPI.ManagerExperiments } experiments
     */
    experiments: HomeyAPI.ManagerExperiments;
    /**
     * @memberof HomeyAPI#
     * @member { HomeyAPI.ManagerFlow } flow
     */
    flow: HomeyAPI.ManagerFlow;
    /**
     * @memberof HomeyAPI#
     * @member { HomeyAPI.ManagerFlowToken } flowToken
     */
    flowToken: HomeyAPI.ManagerFlowToken;
    /**
     * @memberof HomeyAPI#
     * @member { HomeyAPI.ManagerGeolocation } geolocation
     */
    geolocation: HomeyAPI.ManagerGeolocation;
    /**
     * @memberof HomeyAPI#
     * @member { HomeyAPI.ManagerGoogleAssistant } googleAssistant
     */
    googleAssistant: HomeyAPI.ManagerGoogleAssistant;
    /**
     * @memberof HomeyAPI#
     * @member { HomeyAPI.ManagerI18n } i18n
     */
    i18n: HomeyAPI.ManagerI18n;
    /**
     * @memberof HomeyAPI#
     * @member { HomeyAPI.ManagerImages } images
     */
    images: HomeyAPI.ManagerImages;
    /**
     * @memberof HomeyAPI#
     * @member { HomeyAPI.ManagerInsights } insights
     */
    insights: HomeyAPI.ManagerInsights;
    /**
     * @memberof HomeyAPI#
     * @member { HomeyAPI.ManagerLedring } ledring
     */
    ledring: HomeyAPI.ManagerLedring;
    /**
     * @memberof HomeyAPI#
     * @member { HomeyAPI.ManagerLogic } logic
     */
    logic: HomeyAPI.ManagerLogic;
    /**
     * @memberof HomeyAPI#
     * @member { HomeyAPI.ManagerMobile } mobile
     */
    mobile: HomeyAPI.ManagerMobile;
    /**
     * @memberof HomeyAPI#
     * @member { HomeyAPI.ManagerMoods } moods
     */
    moods: HomeyAPI.ManagerMoods;
    /**
     * @memberof HomeyAPI#
     * @member { HomeyAPI.ManagerNotifications } notifications
     */
    notifications: HomeyAPI.ManagerNotifications;
    /**
     * @memberof HomeyAPI#
     * @member { HomeyAPI.ManagerPresence } presence
     */
    presence: HomeyAPI.ManagerPresence;
    /**
     * @memberof HomeyAPI#
     * @member { HomeyAPI.ManagerReports } reports
     */
    reports: HomeyAPI.ManagerReports;
    /**
     * @memberof HomeyAPI#
     * @member { HomeyAPI.ManagerRF } rf
     */
    rf: HomeyAPI.ManagerRF;
    /**
     * @memberof HomeyAPI#
     * @member { HomeyAPI.ManagerSessions } sessions
     */
    sessions: HomeyAPI.ManagerSessions;
    /**
     * @memberof HomeyAPI#
     * @member { HomeyAPI.ManagerSpeechOutput } speechOutput
     */
    speechOutput: HomeyAPI.ManagerSpeechOutput;
    /**
     * @memberof HomeyAPI#
     * @member { HomeyAPI.ManagerSystem } system
     */
    system: HomeyAPI.ManagerSystem;
    /**
     * @memberof HomeyAPI#
     * @member { HomeyAPI.ManagerUpdates } updates
     */
    updates: HomeyAPI.ManagerUpdates;
    /**
     * @memberof HomeyAPI#
     * @member { HomeyAPI.ManagerUsers } users
     */
    users: HomeyAPI.ManagerUsers;
    /**
     * @memberof HomeyAPI#
     * @member { HomeyAPI.ManagerWeather } weather
     */
    weather: HomeyAPI.ManagerWeather;
    /**
     * @memberof HomeyAPI#
     * @member { HomeyAPI.ManagerZigBee } zigBee
     */
    zigBee: HomeyAPI.ManagerZigBee;
    /**
     * @memberof HomeyAPI#
     * @member { HomeyAPI.ManagerZones } zones
     */
    zones: HomeyAPI.ManagerZones;
    /**
     * @memberof HomeyAPI#
     * @member { HomeyAPI.ManagerZwave } zwave
     */
    zwave: HomeyAPI.ManagerZwave;
    /**
     * Unsubscribes all realtime events, clear all caches, and remove all event listeners for all managers and their managed objects
     */
    destroy(): void;
    /**
     * Enables automatic route detection
     * @param {number} [interval] Alternative interval in milliseconds (defaults to 15 seconds)
     */
    enableRouteDetection(interval?: number): void;
    /**
     * Disables automatic route detection
     */
    disableRouteDetection(): void;
    /**
     * forces a detection of routes
     * @returns {string} Detected baseUrl
     */
    detectRoute(): string;
    /**
     * Log out on Homey
     */
    logout(): void;
    /**
     * A shortcut to {@link HomeyAPI.ManagerSessions.Session#hasScope} for the current session.
     * @param {string} scope
     * @returns {boolean} true if the scope is available, false otherwise
     */
    hasScope(scope: string): boolean;
    /**
     * A shortcut to {@link HomeyAPI.ManagerSessions.Session#hasScopes} for the current session.
     * @param {string[]} scopes
     * @returns {boolean} true if the scopes are available, false otherwise
     */
    hasScopes(scopes: string[]): boolean;
    /**
     * Creates a new HomeyAPI that connects to the homey that the invoking script is hosted on.
     * @param {object} [homey] - The Homey instance (`this.homey`), only required in SDK v3
     * @param {string} [token] - The Homey Token to use
     * @returns {HomeyAPI} The HomeyAPI instance
     */
    static forCurrentHomey(homey?: any, token?: string): HomeyAPI;
}

declare namespace HomeyAPI {
    class ManagerAlarms {
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.alarm.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { HomeyAPI.ManagerAlarms.Alarm } [opts.filter] - A response filter (Using a filter will bypass all caches, use sparingely)
         * @returns { Promise<Object.<string, HomeyAPI.ManagerAlarms.Alarm>> } Successful response
         */
        getAlarms(opts?: {
            filter?: HomeyAPI.ManagerAlarms.Alarm;
        }): Promise<{
            [key: string]: HomeyAPI.ManagerAlarms.Alarm;
        }>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.alarm<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { HomeyAPI.ManagerAlarms.Alarm } opts.alarm
         * @returns { Promise<void> } Successful response
         */
        createAlarm(opts?: {
            alarm: HomeyAPI.ManagerAlarms.Alarm;
        }): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.alarm.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @returns { Promise<HomeyAPI.ManagerAlarms.Alarm> } Successful response
         */
        getAlarm(opts?: {
            id: string;
        }): Promise<HomeyAPI.ManagerAlarms.Alarm>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.alarm<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @param { HomeyAPI.ManagerAlarms.Alarm } opts.alarm
         * @returns { Promise<void> } Successful response
         */
        updateAlarm(opts?: {
            id: string;
            alarm: HomeyAPI.ManagerAlarms.Alarm;
        }): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.alarm<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @returns { Promise<void> } Successful response
         */
        deleteAlarm(opts?: {
            id: string;
        }): Promise<void>;
        /**
         * Unsubscribes to realtime events, clear all caches, and remove all event listeners for this manager and it's managed objects
         */
        destroy(): void;
    }
    namespace ManagerAlarms {
        /**
         *
         * @memberof HomeyAPI.ManagerAlarms
         * @property { number } code
         * @property { string } error
         * @property { string } error_description
         * @property { string } $stack
         * @hideconstructor
         */
        class Error {
            code: number;
            error: string;
            error_description: string;
            $stack: string;
        }
        /**
         *
         * @memberof HomeyAPI.ManagerAlarms
         * @property { string } id
         * @property { string } name
         * @property { string } time
         * @property { boolean } enabled
         * @property { string } nextOccurance
         * @property { object } repetition
         * @property { boolean } repetition.monday
         * @property { boolean } repetition.tuesday
         * @property { boolean } repetition.wednesday
         * @property { boolean } repetition.thursday
         * @property { boolean } repetition.friday
         * @property { boolean } repetition.saturday
         * @property { boolean } repetition.sunday
         * @hideconstructor
         */
        class Alarm {
            id: string;
            name: string;
            time: string;
            enabled: boolean;
            nextOccurance: string;
            repetition: {
                monday: boolean;
                tuesday: boolean;
                wednesday: boolean;
                thursday: boolean;
                friday: boolean;
                saturday: boolean;
                sunday: boolean;
            };
        }
    }
    class ManagerApps {
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.app.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { HomeyAPI.ManagerApps.App } [opts.filter] - A response filter (Using a filter will bypass all caches, use sparingely)
         * @returns { Promise<Object.<string, HomeyAPI.ManagerApps.App>> } Successful response
         */
        getApps(opts?: {
            filter?: HomeyAPI.ManagerApps.App;
        }): Promise<{
            [key: string]: HomeyAPI.ManagerApps.App;
        }>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.app.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @returns { Promise<HomeyAPI.ManagerApps.App> } Successful response
         */
        getApp(opts?: {
            id: string;
        }): Promise<HomeyAPI.ManagerApps.App>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.app<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @param { HomeyAPI.ManagerApps.App } opts.app
         * @returns { Promise<void> } Successful response
         */
        updateApp(opts?: {
            id: string;
            app: HomeyAPI.ManagerApps.App;
        }): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.app<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @param { boolean } [opts.purgeSettings]
         * @returns { Promise<void> } Successful response
         */
        uninstallApp(opts?: {
            id: string;
            purgeSettings?: boolean;
        }): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.app.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @param { string } [opts.message]
         * @returns { Promise<void> } Successful response
         */
        getAppStd(opts?: {
            id: string;
            message?: string;
        }): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.app.control<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @returns { Promise<object> } A key-value object with app settings
         */
        getAppSettings(opts?: {
            id: string;
        }): Promise<object>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.app.control<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @param { string } opts.name
         * @returns { Promise<void> } Successful response
         */
        getAppSetting(opts?: {
            id: string;
            name: string;
        }): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.app.control<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @param { string } opts.name
         * @param { object } opts.value
         * @returns { Promise<void> } Successful response
         */
        setAppSetting(opts?: {
            id: string;
            name: string;
            value: any;
        }): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.app.control<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @param { string } opts.name
         * @returns { Promise<void> } Successful response
         */
        unsetAppSetting(opts?: {
            id: string;
            name: string;
        }): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.app<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @returns { Promise<void> } Successful response
         */
        restartApp(opts?: {
            id: string;
        }): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.app<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @returns { Promise<void> } Successful response
         */
        garbageCollectApp(opts?: {
            id: string;
        }): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.app<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @returns { Promise<void> } Successful response
         */
        enableApp(opts?: {
            id: string;
        }): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.app<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @returns { Promise<void> } Successful response
         */
        disableApp(opts?: {
            id: string;
        }): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.app.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @returns { Promise<void> } Successful response
         */
        getAppLocales(opts?: {
            id: string;
        }): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.app<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @param { string } [opts.channel]  -  ("stable" | "beta" | "alpha")
         * @returns { Promise<void> } Successful response
         */
        installFromAppStore(opts?: {
            id: string;
            channel?: string;
        }): Promise<void>;
        /**
         * Unsubscribes to realtime events, clear all caches, and remove all event listeners for this manager and it's managed objects
         */
        destroy(): void;
    }
    namespace ManagerApps {
        /**
         *
         * @memberof HomeyAPI.ManagerApps
         * @property { number } code
         * @property { string } error
         * @property { string } error_description
         * @property { string } $stack
         * @hideconstructor
         */
        class Error {
            code: number;
            error: string;
            error_description: string;
            $stack: string;
        }
        /**
         *
         * @memberof HomeyAPI.ManagerApps
         * @property { boolean } enabled
         * @property { boolean } autoupdate
         * @property { string } id
         * @property { number } sdk  (1 | 2 | 3)
         * @property { string } name
         * @property { string } origin  ("appstore" | "devkit_run" | "devkit_install" | "unknown")
         * @property { string } channel  ("stable" | "beta" | "alpha")
         * @property { string } version
         * @property { string } compatibility
         * @property { string } icon
         * @property { object } iconObj
         * @property { string } iconObj.id
         * @property { string } iconObj.url
         * @property { object } author
         * @property { string } author.name
         * @property { string } author.email
         * @property { string[] } permissions
         * @property { object } images
         * @property { string } images.small
         * @property { string } images.large
         * @property { string } session
         * @property { boolean } ready
         * @property { string } state  ("stopped" | "stopping" | "starting" | "running")
         * @property { boolean } crashed
         * @property { string } crashedMessage
         * @property { number } exitCode
         * @property { string } exitSignal
         * @property { number } exitCount
         * @property { boolean } settings
         * @property { string } brandColor
         * @property { boolean } hasDrivers
         * @property { object } usage
         * @property { number } usage.cpu
         * @property { number } usage.mem
         * @property { object } updateAvailable
         * @property { string } updateAvailable.version
         * @property { string[] } updateAvailable.permissions
         * @hideconstructor
         */
        class App {
            /**
             * Sends an API HTTP GET call to this App
             * @param {string} path - The endpoint to make the call to
             * @param {object} [queryParameters] - The HTTP query parameters
             * @returns {object} the API response
             */
            apiGet(path: string, queryParameters?: any): any;
            /**
             * Sends an API HTTP PUT call to this App
             * @param {string} path - The endpoint to make the call to
             * @param {object} [body] - The HTTP body
             * @param {object} [queryParameters] - The HTTP query parameters
             * @returns {object} the API response
             */
            apiPut(path: string, body?: any, queryParameters?: any): any;
            /**
             * Sends an API HTTP POST call to this App
             * @param {string} path - The endpoint to make the call to
             * @param {object} [body] - The HTTP body
             * @param {object} [queryParameters] - The HTTP query parameters
             * @returns {object} the API response
             */
            apiPost(path: string, body?: any, queryParameters?: any): any;
            /**
             * Sends an API HTTP DELETE call to this App
             * @param {string} path - The endpoint to make the call to
             * @param {object} [body] - The HTTP body
             * @param {object} [queryParameters] - The HTTP query parameters
             * @returns {object} the API response
             */
            apiDelete(path: string, body?: any, queryParameters?: any): any;
            enabled: boolean;
            autoupdate: boolean;
            id: string;
            /**
             * (1 | 2 | 3)
            */
            sdk: number;
            name: string;
            /**
             * ("appstore" | "devkit_run" | "devkit_install" | "unknown")
            */
            origin: string;
            /**
             * ("stable" | "beta" | "alpha")
            */
            channel: string;
            version: string;
            compatibility: string;
            icon: string;
            iconObj: {
                id: string;
                url: string;
            };
            author: {
                name: string;
                email: string;
            };
            permissions: string[];
            images: {
                small: string;
                large: string;
            };
            session: string;
            ready: boolean;
            /**
             * ("stopped" | "stopping" | "starting" | "running")
            */
            state: string;
            crashed: boolean;
            crashedMessage: string;
            exitCode: number;
            exitSignal: string;
            exitCount: number;
            settings: boolean;
            brandColor: string;
            hasDrivers: boolean;
            usage: {
                cpu: number;
                mem: number;
            };
            updateAvailable: {
                version: string;
                permissions: string[];
            };
        }
    }
    class ManagerAudio {
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @returns { Promise<void> } Successful response
         */
        playVolumeHint(opts?: any): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { number } opts.value
         * @returns { Promise<void> } Successful response
         */
        setOptionVolume(opts?: {
            value: number;
        }): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @returns { Promise<void> } Successful response
         */
        getOptionVolume(opts?: any): Promise<void>;
    }
    namespace ManagerAudio {
        /**
         *
         * @memberof HomeyAPI.ManagerAudio
         * @property { number } code
         * @property { string } error
         * @property { string } error_description
         * @property { string } $stack
         * @hideconstructor
         */
        class Error {
            code: number;
            error: string;
            error_description: string;
            $stack: string;
        }
    }
    class ManagerBackup {
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @returns { Promise<void> } Successful response
         */
        scheduleBackup(opts?: any): Promise<void>;
        /**
         * Gets this manager's state
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @returns { Promise<object> } The state of this manager
         */
        getState(opts?: any): Promise<object>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { boolean } opts.value
         * @returns { Promise<void> } Successful response
         */
        setOptionAutomaticBackupsEnabled(opts?: {
            value: boolean;
        }): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @returns { Promise<void> } Successful response
         */
        getOptionAutomaticBackupsEnabled(opts?: any): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @returns { Promise<void> } Successful response
         */
        getOptionLastSuccessfulBackup(opts?: any): Promise<void>;
        /**
         * Unsubscribes to realtime events, clear all caches, and remove all event listeners for this manager and it's managed objects
         */
        destroy(): void;
    }
    namespace ManagerBackup {
        /**
         *
         * @memberof HomeyAPI.ManagerBackup
         * @property { number } code
         * @property { string } error
         * @property { string } error_description
         * @property { string } $stack
         * @hideconstructor
         */
        class Error {
            code: number;
            error: string;
            error_description: string;
            $stack: string;
        }
    }
    class ManagerBLE {
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.command
         * @param { object } [opts.opts]
         * @returns { Promise<void> } Successful response
         */
        runCommand(opts?: {
            command: string;
            opts?: any;
        }): Promise<void>;
        /**
         * Gets this manager's state
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @returns { Promise<object> } The state of this manager
         */
        getState(opts?: any): Promise<object>;
        /**
         * Unsubscribes to realtime events, clear all caches, and remove all event listeners for this manager and it's managed objects
         */
        destroy(): void;
    }
    namespace ManagerBLE {
        /**
         *
         * @memberof HomeyAPI.ManagerBLE
         * @property { number } code
         * @property { string } error
         * @property { string } error_description
         * @property { string } $stack
         * @hideconstructor
         */
        class Error {
            code: number;
            error: string;
            error_description: string;
            $stack: string;
        }
    }
    class ManagerCloud {
        /**
         * Gets this manager's state
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @returns { Promise<object> } The state of this manager
         */
        getState(opts?: any): Promise<object>;
        /**
         * Unsubscribes to realtime events, clear all caches, and remove all event listeners for this manager and it's managed objects
         */
        destroy(): void;
    }
    namespace ManagerCloud {
        /**
         *
         * @memberof HomeyAPI.ManagerCloud
         * @property { number } code
         * @property { string } error
         * @property { string } error_description
         * @property { string } $stack
         * @hideconstructor
         */
        class Error {
            code: number;
            error: string;
            error_description: string;
            $stack: string;
        }
    }
    class ManagerCoprocessor {
        /**
         * Sets the rx modulation until the next tx job
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system<br/>
         * </p>
         * @since 1.5.13
         * @param {object} [opts] - Named parameters
         * @param { string } [opts.deviceId]  -  ("ctrl433" | "ctrl868")
         * @param { string } [opts.type]  -  ("ASK" | "FSK" | "2FSK" | "4FSK" | "GFSK" | "MSK")
         * @param { number } [opts.carrier]
         * @param { number } [opts.channelDeviation]
         * @param { number } [opts.channelSpacing]
         * @param { number } [opts.baudRate]
         * @returns { Promise<void> } Successful response
         */
        setModulation(opts?: {
            deviceId?: string;
            type?: string;
            carrier?: number;
            channelDeviation?: number;
            channelSpacing?: number;
            baudRate?: number;
        }): Promise<void>;
        /**
         * Sets the rx AGC until the next tx job
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system<br/>
         * </p>
         * @since 1.5.13
         * @param {object} [opts] - Named parameters
         * @param { string } [opts.deviceId]  -  ("ctrl433" | "ctrl868")
         * @param { object } [opts.config]
         * @returns { Promise<void> } Successful response
         */
        setConfig(opts?: {
            deviceId?: string;
            config?: any;
        }): Promise<void>;
    }
    namespace ManagerCoprocessor {
        /**
         *
         * @memberof HomeyAPI.ManagerCoprocessor
         * @property { number } code
         * @property { string } error
         * @property { string } error_description
         * @property { string } $stack
         * @hideconstructor
         */
        class Error {
            code: number;
            error: string;
            error_description: string;
            $stack: string;
        }
    }
    class ManagerDashboards {
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.dashboard.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { HomeyAPI.ManagerDashboards.Dashboard } [opts.filter] - A response filter (Using a filter will bypass all caches, use sparingely)
         * @returns { Promise<Object.<string, HomeyAPI.ManagerDashboards.Dashboard>> } Successful response
         */
        getDashboards(opts?: {
            filter?: HomeyAPI.ManagerDashboards.Dashboard;
        }): Promise<{
            [key: string]: HomeyAPI.ManagerDashboards.Dashboard;
        }>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.dashboard<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { HomeyAPI.ManagerDashboards.Dashboard } opts.dashboard
         * @returns { Promise<void> } Successful response
         */
        createDashboard(opts?: {
            dashboard: HomeyAPI.ManagerDashboards.Dashboard;
        }): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.dashboard.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @returns { Promise<HomeyAPI.ManagerDashboards.Dashboard> } Successful response
         */
        getDashboard(opts?: {
            id: string;
        }): Promise<HomeyAPI.ManagerDashboards.Dashboard>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.dashboard<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @param { HomeyAPI.ManagerDashboards.Dashboard } opts.dashboard
         * @returns { Promise<void> } Successful response
         */
        updateDashboard(opts?: {
            id: string;
            dashboard: HomeyAPI.ManagerDashboards.Dashboard;
        }): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.dashboard<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @returns { Promise<void> } Successful response
         */
        deleteDashboard(opts?: {
            id: string;
        }): Promise<void>;
        /**
         * Unsubscribes to realtime events, clear all caches, and remove all event listeners for this manager and it's managed objects
         */
        destroy(): void;
    }
    namespace ManagerDashboards {
        /**
         *
         * @memberof HomeyAPI.ManagerDashboards
         * @property { number } code
         * @property { string } error
         * @property { string } error_description
         * @property { string } $stack
         * @hideconstructor
         */
        class Error {
            code: number;
            error: string;
            error_description: string;
            $stack: string;
        }
        /**
         *
         * @memberof HomeyAPI.ManagerDashboards
         * @property { string } id
         * @property { string } name
         * @property { object } widgets
         * @property { object } lines
         * @hideconstructor
         */
        class Dashboard {
            id: string;
            name: string;
            widgets: any;
            lines: any;
        }
    }
    class ManagerDatabase {
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @returns { Promise<void> } Successful response
         */
        optimize(opts?: any): Promise<void>;
    }
    namespace ManagerDatabase {
        /**
         *
         * @memberof HomeyAPI.ManagerDatabase
         * @property { number } code
         * @property { string } error
         * @property { string } error_description
         * @property { string } $stack
         * @hideconstructor
         */
        class Error {
            code: number;
            error: string;
            error_description: string;
            $stack: string;
        }
    }
    class ManagerDevices {
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.device.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { HomeyAPI.ManagerDevices.Device } [opts.filter] - A response filter (Using a filter will bypass all caches, use sparingely)
         * @returns { Promise<Object.<string, HomeyAPI.ManagerDevices.Device>> } Successful response
         */
        getDevices(opts?: {
            filter?: HomeyAPI.ManagerDevices.Device;
        }): Promise<{
            [key: string]: HomeyAPI.ManagerDevices.Device;
        }>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.device.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @returns { Promise<HomeyAPI.ManagerDevices.Device> } Successful response
         */
        getDevice(opts?: {
            id: string;
        }): Promise<HomeyAPI.ManagerDevices.Device>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.device<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @param { HomeyAPI.ManagerDevices.Device } opts.device
         * @returns { Promise<HomeyAPI.ManagerDevices.Device> } Successful response
         */
        updateDevice(opts?: {
            id: string;
            device: HomeyAPI.ManagerDevices.Device;
        }): Promise<HomeyAPI.ManagerDevices.Device>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.device<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @returns { Promise<void> } Successful response
         */
        deleteDevice(opts?: {
            id: string;
        }): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.device.control<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.deviceId
         * @param { string } opts.capabilityId
         * @param { object } opts.value
         * @param { object } [opts.opts]
         * @param { string } [opts.transactionId]
         * @returns { Promise<object> } Successful response
         */
        setCapabilityValue(opts?: {
            deviceId: string;
            capabilityId: string;
            value: any;
            opts?: any;
            transactionId?: string;
        }): Promise<object>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.device.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @returns { Promise<void> } Successful response
         */
        getDeviceSettingsObj(opts?: {
            id: string;
        }): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.device<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @param { object } opts.settings
         * @returns { Promise<object> } returns an object containing the actual changed settings and an optional message
         */
        setDeviceSettings(opts?: {
            id: string;
            settings: any;
        }): Promise<object>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.device.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { HomeyAPI.ManagerDevices.Capability } [opts.filter] - A response filter (Using a filter will bypass all caches, use sparingely)
         * @returns { Promise<HomeyAPI.ManagerDevices.Capability[]> } Successful response
         */
        getCapabilities(opts?: {
            filter?: HomeyAPI.ManagerDevices.Capability;
        }): Promise<HomeyAPI.ManagerDevices.Capability[]>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.device.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.uri
         * @param { string } opts.id
         * @returns { Promise<HomeyAPI.ManagerDevices.Capability> } Successful response
         */
        getCapability(opts?: {
            uri: string;
            id: string;
        }): Promise<HomeyAPI.ManagerDevices.Capability>;
        /**
         * Unsubscribes to realtime events, clear all caches, and remove all event listeners for this manager and it's managed objects
         */
        destroy(): void;
    }
    namespace ManagerDevices {
        /**
         *
         * @memberof HomeyAPI.ManagerDevices
         * @property { number } code
         * @property { string } error
         * @property { string } error_description
         * @property { string } $stack
         * @hideconstructor
         */
        class Error {
            code: number;
            error: string;
            error_description: string;
            $stack: string;
        }
        /**
         *
         * @memberof HomeyAPI.ManagerDevices
         * @property { string } id
         * @property { string } name
         * @property { string } driverUri
         * @property { string } driverId
         * @property { string } zone The id of the device's zone.
         * @property { object } data
         * @property { string } icon
         * @property { object } iconObj
         * @property { string } iconObj.id
         * @property { string } iconObj.url
         * @property { object } iconOverride
         * @property { object } settings
         * @property { boolean } settingsObj This property is true when there are settings, getable by the getDeviceSettingsObj method
         * @property { string } class
         * @property { object } energy
         * @property { object } energy.approximation
         * @property { number } energy.approximation.usageOn
         * @property { number } energy.approximation.usageOff
         * @property { number } energy.approximation.usageConstant
         * @property { boolean } energy.cumulative
         * @property { string[] } energy.batteries
         * @property { object } energyObj
         * @property { object } virtualClass
         * @property { object } ui
         * @property { string } ui.quickAction Optional capabilityId of the quick action
         * @property { object[] } ui.components
         * @property { string } ui.components.id ID of the UI component
         * @property { string[] } ui.components.capabilities An array of capabilityIds
         * @property { object } uiIndicator
         * @property { string[] } capabilities
         * @property { Object.<string, object> } capabilitiesObj
         * @property { string } capabilitiesObj.[key].id
         * @property { string } capabilitiesObj.[key].uri
         * @property { string } capabilitiesObj.[key].title
         * @property { string } capabilitiesObj.[key].desc
         * @property { string } capabilitiesObj.[key].type  ("boolean" | "number" | "string" | "enum")
         * @property { boolean } capabilitiesObj.[key].getable
         * @property { boolean } capabilitiesObj.[key].setable
         * @property { string } capabilitiesObj.[key].chartType  ("line" | "area" | "stepLine" | "column" | "spline" | "splineArea" | "scatter")
         * @property { number } capabilitiesObj.[key].decimals
         * @property { number } capabilitiesObj.[key].min
         * @property { number } capabilitiesObj.[key].max
         * @property { number } capabilitiesObj.[key].step
         * @property { string } capabilitiesObj.[key].units
         * @property { object[] } capabilitiesObj.[key].values
         * @property { string } capabilitiesObj.[key].values.id
         * @property { string } capabilitiesObj.[key].values.title
         * @property { object } capabilitiesObj.[key].value
         * @property { string } capabilitiesObj.[key].lastUpdated
         * @property { object } capabilitiesObj.[key].options
         * @property { object } capabilitiesOptions
         * @property { string[] } flags
         * @property { boolean } ready A device is when the device's driver is available and ready.
         * @property { boolean } available A device can be available or unavailable, decided by the device's driver. If the driver is unavailable, the property `unavailableMessage` might be set. For example, a device can be unavailable when there is no wireless connection possible.
         * @property { boolean } repair If true, this device can be repaired using a repair PairSession.
         * @property { boolean } unpair If true, this device needs to be deleted using an unpair PairSession.
         * @property { string } unavailableMessage
         * @property { object[] } images
         * @property { string } images.type  ("media" | "camera")
         * @property { string } images.id
         * @property { HomeyAPI.ManagerImages.Image } images.imageObj
         * @property { object[] } insights
         * @property { string } insights.uri
         * @property { string } insights.id
         * @property { string } insights.title
         * @property { string } insights.titleTrue
         * @property { string } insights.titleFalse
         * @property { string } insights.units
         * @property { number } insights.decimals
         * @property { string } color
         * @hideconstructor
         */
        class Device {
            /**
             * Creates a new CapabilityInstance.
             *
             * A CapabilityInstance can be used to integrate a two-way sync of capability states into your app.
             *
             * @param {string} capabilityId The capability identifier
             * @param {function} listener A function to invoke when the capability is changed by anything other than the returned capabilityInstance
             *
             * @returns {HomeyAPI.ManagerDevices.Device.CapabilityInstance}
             */
            makeCapabilityInstance(capabilityId: string, listener: (...params: any[]) => any): HomeyAPI.ManagerDevices.Device.CapabilityInstance;
            id: string;
            name: string;
            driverUri: string;
            driverId: string;
            /**
             * The id of the device's zone.
            */
            zone: string;
            data: any;
            icon: string;
            iconObj: {
                id: string;
                url: string;
            };
            iconOverride: any;
            settings: any;
            /**
             * This property is true when there are settings, getable by the getDeviceSettingsObj method
            */
            settingsObj: boolean;
            class: string;
            energy: {
                approximation: {
                    usageOn: number;
                    usageOff: number;
                    usageConstant: number;
                };
                cumulative: boolean;
                batteries: string[];
            };
            energyObj: any;
            virtualClass: any;
            ui: {
                quickAction: string;
                components: {
                    id: string;
                    capabilities: string[];
                };
            };
            uiIndicator: any;
            capabilities: string[];
            capabilitiesObj: {
                [key: string]: object;
            };
            capabilitiesOptions: any;
            flags: string[];
            /**
             * A device is when the device's driver is available and ready.
            */
            ready: boolean;
            /**
             * A device can be available or unavailable, decided by the device's driver. If the driver is unavailable, the property `unavailableMessage` might be set. For example, a device can be unavailable when there is no wireless connection possible.
            */
            available: boolean;
            /**
             * If true, this device can be repaired using a repair PairSession.
            */
            repair: boolean;
            /**
             * If true, this device needs to be deleted using an unpair PairSession.
            */
            unpair: boolean;
            unavailableMessage: string;
            images: {
                type: string;
                id: string;
                imageObj: HomeyAPI.ManagerImages.Image;
            };
            insights: {
                uri: string;
                id: string;
                title: string;
                titleTrue: string;
                titleFalse: string;
                units: string;
                decimals: number;
            };
            color: string;
        }
        /**
         *
         * @memberof HomeyAPI.ManagerDevices
         * @property { string } id
         * @property { string } uri
         * @property { string } title
         * @property { string } desc
         * @property { string } type  ("boolean" | "number" | "string" | "enum")
         * @property { boolean } getable
         * @property { boolean } setable
         * @property { string } chartType  ("line" | "area" | "stepLine" | "column" | "spline" | "splineArea" | "scatter")
         * @property { number } decimals
         * @property { number } min
         * @property { number } max
         * @property { number } step
         * @property { string } units
         * @property { object[] } values
         * @property { string } values.id
         * @property { string } values.title
         * @hideconstructor
         */
        class Capability {
            id: string;
            uri: string;
            title: string;
            desc: string;
            /**
             * ("boolean" | "number" | "string" | "enum")
            */
            type: string;
            getable: boolean;
            setable: boolean;
            /**
             * ("line" | "area" | "stepLine" | "column" | "spline" | "splineArea" | "scatter")
            */
            chartType: string;
            decimals: number;
            min: number;
            max: number;
            step: number;
            units: string;
            values: {
                id: string;
                title: string;
            };
        }
        namespace Device {
            class CapabilityInstance {
                /**
                 * Detaches the capability listener and stops invoking the event callback
                 *
                 */
                destroy(): void;
                /**
                 * Sets the capability to the specified value.
                 * @param {*} value The new value
                 */
                setValue(value: any): void;
                /**
                 * The Device to which this capability belongs
                 * @type {HomeyAPI.ManagerDevices.Device}
                 * @readonly
                 */
                readonly device: HomeyAPI.ManagerDevices.Device;
                /**
                 * The CapabilityObj for this capability
                 * @readonly
                 */
                readonly capability: any;
                /**
                 * The current capability value or most recently pending requested value
                 * @type {*}
                 * @readonly
                 */
                readonly value: any;
                /**
                 * The moment this capability last changed
                 * @type {Date}
                 * @readonly
                 */
                readonly lastChanged: Date;
                /**
                 * The Capability ID
                 * @type {string}
                 * @readonly
                 */
                readonly id: string;
                /**
                 * True if this capability is gettable
                 * @type {boolean}
                 * @readonly
                 */
                readonly getable: boolean;
                /**
                 * True if this capability is settable
                 * @type {boolean}
                 * @readonly
                 */
                readonly setable: boolean;
                /**
                 * Array of values this capability can accept or undefined
                 * @type {string[]}
                 * @readonly
                 */
                readonly values: string[];
                /**
                 * The type of the value of this capability
                 * @type {string}
                 * @readonly
                 */
                readonly type: string;
                /**
                 * The minimal value for this capability
                 * @type {number}
                 * @readonly
                 */
                readonly min: number;
                /**
                 * The maximal value for this capability
                 * @type {number}
                 * @readonly
                 */
                readonly max: number;
                /**
                 * The amount of decimals for this capability
                 * @type {number}
                 * @readonly
                 */
                readonly decimals: number;
                /**
                 * The step size for this capability
                 * @type {number}
                 * @readonly
                 */
                readonly step: number;
                /**
                 * The title of this capability
                 * @type {string}
                 * @readonly
                 */
                readonly title: string;
                /**
                 * The unit of this capability
                 * @type {string}
                 * @readonly
                 */
                readonly units: string;
                /**
                 * The description of this capability
                 * @type {Date}
                 * @readonly
                 */
                readonly desc: Date;
            }
        }
    }
    class ManagerDevkit {
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.app<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { object } opts.animation
         * @returns { Promise<void> } Successful response
         */
        startLedringAnimation(opts?: {
            animation: any;
        }): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.app<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.animationId
         * @returns { Promise<void> } Successful response
         */
        stopLedringAnimation(opts?: {
            animationId: string;
        }): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.app<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { object } opts.app  - A tar.gz of the homey app
         * @param { boolean } opts.debug
         * @param { string } opts.env
         * @param { boolean } opts.purgeSettings
         * @returns { Promise<void> } Successful response
         */
        runApp(opts?: {
            app: any;
            debug: boolean;
            env: string;
            purgeSettings: boolean;
        }): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.app<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.session
         * @returns { Promise<void> } Successful response
         */
        stopApp(opts?: {
            session: string;
        }): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @returns { Promise<void> } Successful response
         */
        getUsbMode(opts?: any): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.os  -  ("osx" | "win")
         * @returns { Promise<void> } Successful response
         */
        setUsbMode(opts?: {
            os: string;
        }): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.app.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @returns { Promise<void> } Successful response
         */
        getAppUsage(opts?: any): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.app.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.session
         * @returns { Promise<void> } Successful response
         */
        getAppStdOut(opts?: {
            session: string;
        }): Promise<void>;
    }
    namespace ManagerDevkit {
        /**
         *
         * @memberof HomeyAPI.ManagerDevkit
         * @property { number } code
         * @property { string } error
         * @property { string } error_description
         * @property { string } $stack
         * @hideconstructor
         */
        class Error {
            code: number;
            error: string;
            error_description: string;
            $stack: string;
        }
    }
    class ManagerDrivers {
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.device.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { HomeyAPI.ManagerDrivers.Driver } [opts.filter] - A response filter (Using a filter will bypass all caches, use sparingely)
         * @returns { Promise<HomeyAPI.ManagerDrivers.Driver[]> } Successful response
         */
        getDrivers(opts?: {
            filter?: HomeyAPI.ManagerDrivers.Driver;
        }): Promise<HomeyAPI.ManagerDrivers.Driver[]>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.device<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.uri
         * @param { string } opts.id
         * @returns { Promise<HomeyAPI.ManagerDrivers.Driver> } Successful response
         */
        getDriver(opts?: {
            uri: string;
            id: string;
        }): Promise<HomeyAPI.ManagerDrivers.Driver>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.device<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @returns { Promise<Object.<string, HomeyAPI.ManagerDrivers.PairSession>> } Successful response
         */
        getPairSessions(opts?: any): Promise<{
            [key: string]: HomeyAPI.ManagerDrivers.PairSession;
        }>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.device<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { HomeyAPI.ManagerDrivers.PairSession } opts.pairsession
         * @returns { Promise<HomeyAPI.ManagerDrivers.PairSession> } Successful response
         */
        createPairSession(opts?: {
            pairsession: HomeyAPI.ManagerDrivers.PairSession;
        }): Promise<HomeyAPI.ManagerDrivers.PairSession>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.device<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @returns { Promise<HomeyAPI.ManagerDrivers.PairSession> } Successful response
         */
        getPairSession(opts?: {
            id: string;
        }): Promise<HomeyAPI.ManagerDrivers.PairSession>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.device<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @returns { Promise<void> } Successful response
         */
        deletePairSession(opts?: {
            id: string;
        }): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.device<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @param { string } opts.event
         * @param { object } opts.data
         * @returns { Promise<void> } Successful response
         */
        emitPairingEvent(opts?: {
            id: string;
            event: string;
            data: any;
        }): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.device<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @param { string } opts.callbackId
         * @param { object } [opts.data]
         * @returns { Promise<void> } Successful response
         */
        emitPairingCallback(opts?: {
            id: string;
            callbackId: string;
            data?: any;
        }): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.device<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @returns { Promise<void> } Successful response
         */
        emitPairingHeartbeat(opts?: {
            id: string;
        }): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.device<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @param { HomeyAPI.ManagerDrivers.Device } opts.device
         * @returns { Promise<HomeyAPI.ManagerDrivers.Device> } Successful response
         */
        createPairSessionDevice(opts?: {
            id: string;
            device: HomeyAPI.ManagerDrivers.Device;
        }): Promise<HomeyAPI.ManagerDrivers.Device>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.device<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @returns { Promise<void> } Successful response
         */
        deletePairSessionDevice(opts?: {
            id: string;
        }): Promise<void>;
        /**
         * Unsubscribes to realtime events, clear all caches, and remove all event listeners for this manager and it's managed objects
         */
        destroy(): void;
    }
    namespace ManagerDrivers {
        /**
         *
         * @memberof HomeyAPI.ManagerDrivers
         * @property { number } code
         * @property { string } error
         * @property { string } error_description
         * @property { string } $stack
         * @hideconstructor
         */
        class Error {
            code: number;
            error: string;
            error_description: string;
            $stack: string;
        }
        /**
         *
         * @memberof HomeyAPI.ManagerDrivers
         * @property { string } id
         * @property { string } uri
         * @property { object } uriObj
         * @property { string } icon
         * @property { object } iconObj
         * @property { string } iconObj.id
         * @property { string } iconObj.url
         * @property { boolean } ready
         * @property { boolean } pair
         * @property { boolean } unpair
         * @property { boolean } repair
         * @property { string } color
         * @property { boolean } deprecated
         * @property { string } class
         * @property { object[] } connectivity
         * @hideconstructor
         */
        class Driver {
            id: string;
            uri: string;
            uriObj: any;
            icon: string;
            iconObj: {
                id: string;
                url: string;
            };
            ready: boolean;
            pair: boolean;
            unpair: boolean;
            repair: boolean;
            color: string;
            deprecated: boolean;
            class: string;
            connectivity: object[];
        }
        /**
         *
         * @memberof HomeyAPI.ManagerDrivers
         * @property { string } id
         * @property { string } name
         * @property { string } driverUri
         * @property { string } driverId
         * @property { string } zone The id of the device's zone.
         * @property { object } data
         * @property { string } icon
         * @property { object } iconObj
         * @property { string } iconObj.id
         * @property { string } iconObj.url
         * @property { object } iconOverride
         * @property { object } settings
         * @property { boolean } settingsObj This property is true when there are settings, getable by the getDeviceSettingsObj method
         * @property { string } class
         * @property { object } energy
         * @property { object } energy.approximation
         * @property { number } energy.approximation.usageOn
         * @property { number } energy.approximation.usageOff
         * @property { number } energy.approximation.usageConstant
         * @property { boolean } energy.cumulative
         * @property { string[] } energy.batteries
         * @property { object } energyObj
         * @property { object } virtualClass
         * @property { object } ui
         * @property { string } ui.quickAction Optional capabilityId of the quick action
         * @property { object[] } ui.components
         * @property { string } ui.components.id ID of the UI component
         * @property { string[] } ui.components.capabilities An array of capabilityIds
         * @property { object } uiIndicator
         * @property { string[] } capabilities
         * @property { Object.<string, object> } capabilitiesObj
         * @property { string } capabilitiesObj.[key].id
         * @property { string } capabilitiesObj.[key].uri
         * @property { string } capabilitiesObj.[key].title
         * @property { string } capabilitiesObj.[key].desc
         * @property { string } capabilitiesObj.[key].type  ("boolean" | "number" | "string" | "enum")
         * @property { boolean } capabilitiesObj.[key].getable
         * @property { boolean } capabilitiesObj.[key].setable
         * @property { string } capabilitiesObj.[key].chartType  ("line" | "area" | "stepLine" | "column" | "spline" | "splineArea" | "scatter")
         * @property { number } capabilitiesObj.[key].decimals
         * @property { number } capabilitiesObj.[key].min
         * @property { number } capabilitiesObj.[key].max
         * @property { number } capabilitiesObj.[key].step
         * @property { string } capabilitiesObj.[key].units
         * @property { object[] } capabilitiesObj.[key].values
         * @property { string } capabilitiesObj.[key].values.id
         * @property { string } capabilitiesObj.[key].values.title
         * @property { object } capabilitiesObj.[key].value
         * @property { string } capabilitiesObj.[key].lastUpdated
         * @property { object } capabilitiesObj.[key].options
         * @property { object } capabilitiesOptions
         * @property { string[] } flags
         * @property { boolean } ready A device is when the device's driver is available and ready.
         * @property { boolean } available A device can be available or unavailable, decided by the device's driver. If the driver is unavailable, the property `unavailableMessage` might be set. For example, a device can be unavailable when there is no wireless connection possible.
         * @property { boolean } repair If true, this device can be repaired using a repair PairSession.
         * @property { boolean } unpair If true, this device needs to be deleted using an unpair PairSession.
         * @property { string } unavailableMessage
         * @property { object[] } images
         * @property { string } images.type  ("media" | "camera")
         * @property { string } images.id
         * @property { HomeyAPI.ManagerImages.Image } images.imageObj
         * @property { object[] } insights
         * @property { string } insights.uri
         * @property { string } insights.id
         * @property { string } insights.title
         * @property { string } insights.titleTrue
         * @property { string } insights.titleFalse
         * @property { string } insights.units
         * @property { number } insights.decimals
         * @property { string } color
         * @hideconstructor
         */
        class Device {
            id: string;
            name: string;
            driverUri: string;
            driverId: string;
            /**
             * The id of the device's zone.
            */
            zone: string;
            data: any;
            icon: string;
            iconObj: {
                id: string;
                url: string;
            };
            iconOverride: any;
            settings: any;
            /**
             * This property is true when there are settings, getable by the getDeviceSettingsObj method
            */
            settingsObj: boolean;
            class: string;
            energy: {
                approximation: {
                    usageOn: number;
                    usageOff: number;
                    usageConstant: number;
                };
                cumulative: boolean;
                batteries: string[];
            };
            energyObj: any;
            virtualClass: any;
            ui: {
                quickAction: string;
                components: {
                    id: string;
                    capabilities: string[];
                };
            };
            uiIndicator: any;
            capabilities: string[];
            capabilitiesObj: {
                [key: string]: object;
            };
            capabilitiesOptions: any;
            flags: string[];
            /**
             * A device is when the device's driver is available and ready.
            */
            ready: boolean;
            /**
             * A device can be available or unavailable, decided by the device's driver. If the driver is unavailable, the property `unavailableMessage` might be set. For example, a device can be unavailable when there is no wireless connection possible.
            */
            available: boolean;
            /**
             * If true, this device can be repaired using a repair PairSession.
            */
            repair: boolean;
            /**
             * If true, this device needs to be deleted using an unpair PairSession.
            */
            unpair: boolean;
            unavailableMessage: string;
            images: {
                type: string;
                id: string;
                imageObj: HomeyAPI.ManagerImages.Image;
            };
            insights: {
                uri: string;
                id: string;
                title: string;
                titleTrue: string;
                titleFalse: string;
                units: string;
                decimals: number;
            };
            color: string;
        }
        /**
         *
         * @memberof HomeyAPI.ManagerDrivers
         * @property { string } id
         * @property { string } type  ("pair" | "unpair" | "repair")
         * @property { string } driverId
         * @property { string } driverUri
         * @property { string } deviceId
         * @property { string } zoneId
         * @property { object[] } views
         * @hideconstructor
         */
        class PairSession {
            id: string;
            /**
             * ("pair" | "unpair" | "repair")
            */
            type: string;
            driverId: string;
            driverUri: string;
            deviceId: string;
            zoneId: string;
            views: object[];
        }
    }
    class ManagerEnergy {
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.insights.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } [opts.zone]
         * @returns { Promise<void> } Successful response
         */
        getLiveReport(opts?: {
            zone?: string;
        }): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { number } opts.value
         * @returns { Promise<void> } Successful response
         */
        setOptionKWhCost(opts?: {
            value: number;
        }): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @returns { Promise<void> } Successful response
         */
        getOptionKWhCost(opts?: any): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.value
         * @returns { Promise<void> } Successful response
         */
        setOptionCurrency(opts?: {
            value: string;
        }): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @returns { Promise<void> } Successful response
         */
        getOptionCurrency(opts?: any): Promise<void>;
    }
    namespace ManagerEnergy {
        /**
         *
         * @memberof HomeyAPI.ManagerEnergy
         * @property { number } code
         * @property { string } error
         * @property { string } error_description
         * @property { string } $stack
         * @hideconstructor
         */
        class Error {
            code: number;
            error: string;
            error_description: string;
            $stack: string;
        }
    }
    class ManagerExperiments {
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @returns { Promise<void> } Successful response
         */
        getExperiments(opts?: any): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @returns { Promise<void> } Successful response
         */
        enableExperiment(opts?: {
            id: string;
        }): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @returns { Promise<void> } Successful response
         */
        disableExperiment(opts?: {
            id: string;
        }): Promise<void>;
    }
    namespace ManagerExperiments {
        /**
         *
         * @memberof HomeyAPI.ManagerExperiments
         * @property { number } code
         * @property { string } error
         * @property { string } error_description
         * @property { string } $stack
         * @hideconstructor
         */
        class Error {
            code: number;
            error: string;
            error_description: string;
            $stack: string;
        }
    }
    class ManagerFlow {
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.flow.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { HomeyAPI.ManagerFlow.FlowCardTrigger } [opts.filter] - A response filter (Using a filter will bypass all caches, use sparingely)
         * @returns { Promise<HomeyAPI.ManagerFlow.FlowCardTrigger[]> } Successful response
         */
        getFlowCardTriggers(opts?: {
            filter?: HomeyAPI.ManagerFlow.FlowCardTrigger;
        }): Promise<HomeyAPI.ManagerFlow.FlowCardTrigger[]>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.flow.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.uri
         * @param { string } opts.id
         * @returns { Promise<HomeyAPI.ManagerFlow.FlowCardTrigger> } Successful response
         */
        getFlowCardTrigger(opts?: {
            uri: string;
            id: string;
        }): Promise<HomeyAPI.ManagerFlow.FlowCardTrigger>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.flow.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { HomeyAPI.ManagerFlow.FlowCardCondition } [opts.filter] - A response filter (Using a filter will bypass all caches, use sparingely)
         * @returns { Promise<HomeyAPI.ManagerFlow.FlowCardCondition[]> } Successful response
         */
        getFlowCardConditions(opts?: {
            filter?: HomeyAPI.ManagerFlow.FlowCardCondition;
        }): Promise<HomeyAPI.ManagerFlow.FlowCardCondition[]>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.flow.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.uri
         * @param { string } opts.id
         * @returns { Promise<HomeyAPI.ManagerFlow.FlowCardCondition> } Successful response
         */
        getFlowCardCondition(opts?: {
            uri: string;
            id: string;
        }): Promise<HomeyAPI.ManagerFlow.FlowCardCondition>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.flow.start<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.uri
         * @param { string } opts.id
         * @param { object } [opts.args]
         * @param { string } [opts.droptoken]
         * @param { object } [opts.tokens]
         * @param { object } [opts.state]
         * @returns { Promise<object> } Successful response
         */
        runFlowCardCondition(opts?: {
            uri: string;
            id: string;
            args?: any;
            droptoken?: string;
            tokens?: any;
            state?: any;
        }): Promise<object>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.flow.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { HomeyAPI.ManagerFlow.FlowCardAction } [opts.filter] - A response filter (Using a filter will bypass all caches, use sparingely)
         * @returns { Promise<HomeyAPI.ManagerFlow.FlowCardAction[]> } Successful response
         */
        getFlowCardActions(opts?: {
            filter?: HomeyAPI.ManagerFlow.FlowCardAction;
        }): Promise<HomeyAPI.ManagerFlow.FlowCardAction[]>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.flow.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.uri
         * @param { string } opts.id
         * @returns { Promise<HomeyAPI.ManagerFlow.FlowCardAction> } Successful response
         */
        getFlowCardAction(opts?: {
            uri: string;
            id: string;
        }): Promise<HomeyAPI.ManagerFlow.FlowCardAction>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.flow.start<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.uri
         * @param { string } opts.id
         * @param { object } [opts.args]
         * @param { string } [opts.droptoken]
         * @param { object } [opts.tokens]
         * @param { object } [opts.state]
         * @param { number } [opts.duration]  - Duration (optional) in seconds
         * @returns { Promise<object> } Successful response
         */
        runFlowCardAction(opts?: {
            uri: string;
            id: string;
            args?: any;
            droptoken?: string;
            tokens?: any;
            state?: any;
            duration?: number;
        }): Promise<object>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.flow.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.type
         * @param { string } opts.uri
         * @param { string } opts.id
         * @param { string } opts.name
         * @param { string } opts.query
         * @param { object } [opts.args]
         * @returns { Promise<void> } Successful response
         */
        getFlowCardAutocomplete(opts?: {
            type: string;
            uri: string;
            id: string;
            name: string;
            query: string;
            args?: any;
        }): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.flow.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { HomeyAPI.ManagerFlow.Flow } [opts.filter] - A response filter (Using a filter will bypass all caches, use sparingely)
         * @returns { Promise<Object.<string, HomeyAPI.ManagerFlow.Flow>> } Successful response
         */
        getFlows(opts?: {
            filter?: HomeyAPI.ManagerFlow.Flow;
        }): Promise<{
            [key: string]: HomeyAPI.ManagerFlow.Flow;
        }>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.flow<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { HomeyAPI.ManagerFlow.Flow } opts.flow
         * @returns { Promise<void> } Successful response
         */
        createFlow(opts?: {
            flow: HomeyAPI.ManagerFlow.Flow;
        }): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.flow.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @returns { Promise<HomeyAPI.ManagerFlow.Flow> } Successful response
         */
        getFlow(opts?: {
            id: string;
        }): Promise<HomeyAPI.ManagerFlow.Flow>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.flow<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @param { HomeyAPI.ManagerFlow.Flow } opts.flow
         * @returns { Promise<void> } Successful response
         */
        updateFlow(opts?: {
            id: string;
            flow: HomeyAPI.ManagerFlow.Flow;
        }): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.flow<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @returns { Promise<void> } Successful response
         */
        deleteFlow(opts?: {
            id: string;
        }): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.flow.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @returns { Promise<void> } Successful response
         */
        shareFlow(opts?: {
            id: string;
        }): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.flow<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { HomeyAPI.ManagerFlow.Flow } opts.flow
         * @param { object } opts.tokens
         * @param { string } [opts.sessionId]
         * @returns { Promise<void> } Successful response
         */
        testFlow(opts?: {
            flow: HomeyAPI.ManagerFlow.Flow;
            tokens: any;
            sessionId?: string;
        }): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.flow.start<br/>
         * </p>
         * @since 1.5.2
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @param { object } [opts.state]
         * @returns { Promise<void> } Successful response
         */
        triggerFlow(opts?: {
            id: string;
            state?: any;
        }): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.flow.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { HomeyAPI.ManagerFlow.FlowFolder } [opts.filter] - A response filter (Using a filter will bypass all caches, use sparingely)
         * @returns { Promise<Object.<string, HomeyAPI.ManagerFlow.FlowFolder>> } Successful response
         */
        getFlowFolders(opts?: {
            filter?: HomeyAPI.ManagerFlow.FlowFolder;
        }): Promise<{
            [key: string]: HomeyAPI.ManagerFlow.FlowFolder;
        }>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.flow<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { object } opts.flowfolder
         * @returns { Promise<HomeyAPI.ManagerFlow.FlowFolder> } Successful response
         */
        createFlowFolder(opts?: {
            flowfolder: any;
        }): Promise<HomeyAPI.ManagerFlow.FlowFolder>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.flow.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @returns { Promise<HomeyAPI.ManagerFlow.FlowFolder> } Successful response
         */
        getFlowFolder(opts?: {
            id: string;
        }): Promise<HomeyAPI.ManagerFlow.FlowFolder>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.flow<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @param { object } opts.flowfolder
         * @returns { Promise<HomeyAPI.ManagerFlow.FlowFolder> } Successful response
         */
        updateFlowFolder(opts?: {
            id: string;
            flowfolder: any;
        }): Promise<HomeyAPI.ManagerFlow.FlowFolder>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.flow<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @returns { Promise<void> } Successful response
         */
        deleteFlowFolder(opts?: {
            id: string;
        }): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.flow.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { HomeyAPI.ManagerFlow.AdvancedFlow } [opts.filter] - A response filter (Using a filter will bypass all caches, use sparingely)
         * @returns { Promise<Object.<string, HomeyAPI.ManagerFlow.AdvancedFlow>> } Successful response
         */
        getAdvancedFlows(opts?: {
            filter?: HomeyAPI.ManagerFlow.AdvancedFlow;
        }): Promise<{
            [key: string]: HomeyAPI.ManagerFlow.AdvancedFlow;
        }>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.flow<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { HomeyAPI.ManagerFlow.AdvancedFlow } opts.advancedflow
         * @returns { Promise<void> } Successful response
         */
        createAdvancedFlow(opts?: {
            advancedflow: HomeyAPI.ManagerFlow.AdvancedFlow;
        }): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.flow.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @returns { Promise<HomeyAPI.ManagerFlow.AdvancedFlow> } Successful response
         */
        getAdvancedFlow(opts?: {
            id: string;
        }): Promise<HomeyAPI.ManagerFlow.AdvancedFlow>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.flow<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @param { HomeyAPI.ManagerFlow.AdvancedFlow } opts.advancedflow
         * @returns { Promise<void> } Successful response
         */
        updateAdvancedFlow(opts?: {
            id: string;
            advancedflow: HomeyAPI.ManagerFlow.AdvancedFlow;
        }): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.flow<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @returns { Promise<void> } Successful response
         */
        deleteAdvancedFlow(opts?: {
            id: string;
        }): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.flow.start<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @param { object } [opts.state]
         * @returns { Promise<void> } Successful response
         */
        triggerAdvancedFlow(opts?: {
            id: string;
            state?: any;
        }): Promise<void>;
        /**
         * Unsubscribes to realtime events, clear all caches, and remove all event listeners for this manager and it's managed objects
         */
        destroy(): void;
    }
    namespace ManagerFlow {
        /**
         *
         * @memberof HomeyAPI.ManagerFlow
         * @property { number } code
         * @property { string } error
         * @property { string } error_description
         * @property { string } $stack
         * @hideconstructor
         */
        class Error {
            code: number;
            error: string;
            error_description: string;
            $stack: string;
        }
        /**
         *
         * @memberof HomeyAPI.ManagerFlow
         * @property { string } id
         * @property { string } name
         * @property { boolean } enabled
         * @property { object } folder
         * @property { number } order
         * @property { boolean } broken
         * @property { boolean } triggerable
         * @property { object } trigger
         * @property { string } trigger.uri
         * @property { string } trigger.id
         * @property { string } trigger.droptoken
         * @property { object } trigger.args
         * @property { object[] } conditions
         * @property { string } conditions.uri
         * @property { string } conditions.id
         * @property { string } conditions.droptoken
         * @property { object } conditions.args
         * @property { string } conditions.group  ("group1" | "group2" | "group3")
         * @property { boolean } conditions.inverted
         * @property { object[] } actions
         * @property { string } actions.uri
         * @property { string } actions.id
         * @property { string } actions.droptoken
         * @property { object } actions.args
         * @property { string } actions.group  ("then" | "else")
         * @property { object } actions.duration
         * @property { number } actions.duration.multiplier  (1 | 60)
         * @property { string } actions.duration.number
         * @property { object } actions.delay
         * @property { number } actions.delay.multiplier  (1 | 60)
         * @property { string } actions.delay.number
         * @hideconstructor
         */
        class Flow {
            id: string;
            name: string;
            enabled: boolean;
            folder: any;
            order: number;
            broken: boolean;
            triggerable: boolean;
            trigger: {
                uri: string;
                id: string;
                droptoken: string;
                args: any;
            };
            conditions: {
                uri: string;
                id: string;
                droptoken: string;
                args: any;
                group: string;
                inverted: boolean;
            };
            actions: {
                uri: string;
                id: string;
                droptoken: string;
                args: any;
                group: string;
                duration: {
                    multiplier: number;
                    number: string;
                };
                delay: {
                    multiplier: number;
                    number: string;
                };
            };
        }
        /**
         *
         * @memberof HomeyAPI.ManagerFlow
         * @property { string } uri
         * @property { string } id
         * @property { object } args
         * @property { boolean } deprecated
         * @property { boolean } droptoken
         * @property { boolean } duration
         * @property { object } uriObj
         * @property { boolean } advanced
         * @property { string } title
         * @property { string } hint
         * @property { boolean } highlight
         * @property { object[] } tokens
         * @property { string } tokens.id
         * @property { string } tokens.title
         * @property { string } tokens.hint
         * @property { string } tokens.type  ("string" | "number" | "boolean")
         * @property { object } tokens.example
         * @hideconstructor
         */
        class FlowCardTrigger {
            uri: string;
            id: string;
            args: any;
            deprecated: boolean;
            droptoken: boolean;
            duration: boolean;
            uriObj: any;
            advanced: boolean;
            title: string;
            hint: string;
            highlight: boolean;
            tokens: {
                id: string;
                title: string;
                hint: string;
                type: string;
                example: any;
            };
        }
        /**
         *
         * @memberof HomeyAPI.ManagerFlow
         * @property { string } uri
         * @property { string } id
         * @property { object } args
         * @property { boolean } deprecated
         * @property { boolean } droptoken
         * @property { boolean } duration
         * @property { object } uriObj
         * @property { boolean } advanced
         * @property { string } title
         * @property { string } hint
         * @property { boolean } highlight
         * @hideconstructor
         */
        class FlowCardCondition {
            uri: string;
            id: string;
            args: any;
            deprecated: boolean;
            droptoken: boolean;
            duration: boolean;
            uriObj: any;
            advanced: boolean;
            title: string;
            hint: string;
            highlight: boolean;
        }
        /**
         *
         * @memberof HomeyAPI.ManagerFlow
         * @property { string } uri
         * @property { string } id
         * @property { object } args
         * @property { boolean } deprecated
         * @property { boolean } droptoken
         * @property { boolean } duration
         * @property { object } uriObj
         * @property { boolean } advanced
         * @property { string } title
         * @property { string } hint
         * @property { boolean } highlight
         * @property { object[] } tokens
         * @property { string } tokens.id
         * @property { string } tokens.title
         * @property { string } tokens.hint
         * @property { string } tokens.type  ("string" | "number" | "boolean")
         * @property { object } tokens.example
         * @hideconstructor
         */
        class FlowCardAction {
            uri: string;
            id: string;
            args: any;
            deprecated: boolean;
            droptoken: boolean;
            duration: boolean;
            uriObj: any;
            advanced: boolean;
            title: string;
            hint: string;
            highlight: boolean;
            tokens: {
                id: string;
                title: string;
                hint: string;
                type: string;
                example: any;
            };
        }
        /**
         *
         * @memberof HomeyAPI.ManagerFlow
         * @property { string } id
         * @property { string } name
         * @property { number } order
         * @property { string } parent
         * @hideconstructor
         */
        class FlowFolder {
            id: string;
            name: string;
            order: number;
            parent: string;
        }
        /**
         *
         * @memberof HomeyAPI.ManagerFlow
         * @property { string } id
         * @property { string } name
         * @property { boolean } enabled
         * @property { boolean } broken
         * @property { boolean } triggerable
         * @property { object } folder
         * @property { object } cards
         * @hideconstructor
         */
        class AdvancedFlow {
            id: string;
            name: string;
            enabled: boolean;
            broken: boolean;
            triggerable: boolean;
            folder: any;
            cards: any;
        }
    }
    class ManagerFlowToken {
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.flow.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { HomeyAPI.ManagerFlowToken.FlowToken } [opts.filter] - A response filter (Using a filter will bypass all caches, use sparingely)
         * @returns { Promise<HomeyAPI.ManagerFlowToken.FlowToken[]> } Successful response
         */
        getFlowTokens(opts?: {
            filter?: HomeyAPI.ManagerFlowToken.FlowToken;
        }): Promise<HomeyAPI.ManagerFlowToken.FlowToken[]>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.flow.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.uri
         * @param { string } opts.id
         * @returns { Promise<HomeyAPI.ManagerFlowToken.FlowToken> } Successful response
         */
        getFlowToken(opts?: {
            uri: string;
            id: string;
        }): Promise<HomeyAPI.ManagerFlowToken.FlowToken>;
        /**
         * Unsubscribes to realtime events, clear all caches, and remove all event listeners for this manager and it's managed objects
         */
        destroy(): void;
    }
    namespace ManagerFlowToken {
        /**
         *
         * @memberof HomeyAPI.ManagerFlowToken
         * @property { number } code
         * @property { string } error
         * @property { string } error_description
         * @property { string } $stack
         * @hideconstructor
         */
        class Error {
            code: number;
            error: string;
            error_description: string;
            $stack: string;
        }
        /**
         *
         * @memberof HomeyAPI.ManagerFlowToken
         * @property { string } uri
         * @property { string } id
         * @property { string } title
         * @property { string } type
         * @property { object } value
         * @property { object } uriObj
         * @hideconstructor
         */
        class FlowToken {
            uri: string;
            id: string;
            title: string;
            type: string;
            value: any;
            uriObj: any;
        }
    }
    class ManagerGeolocation {
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.geolocation<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.value  -  ("auto" | "manual")
         * @returns { Promise<void> } Successful response
         */
        setOptionMode(opts?: {
            value: string;
        }): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.geolocation.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @returns { Promise<void> } Successful response
         */
        getOptionMode(opts?: any): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.geolocation<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { object } opts.value
         * @param { number } opts.value.latitude
         * @param { number } opts.value.longitude
         * @param { number } opts.value.accuracy
         * @returns { Promise<void> } Successful response
         */
        setOptionLocation(opts?: {
            value: {
                latitude: number;
                longitude: number;
                accuracy: number;
            };
        }): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.geolocation.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @returns { Promise<void> } Successful response
         */
        getOptionLocation(opts?: any): Promise<void>;
        /**
         * Unsubscribes to realtime events, clear all caches, and remove all event listeners for this manager and it's managed objects
         */
        destroy(): void;
    }
    namespace ManagerGeolocation {
        /**
         *
         * @memberof HomeyAPI.ManagerGeolocation
         * @property { number } code
         * @property { string } error
         * @property { string } error_description
         * @property { string } $stack
         * @hideconstructor
         */
        class Error {
            code: number;
            error: string;
            error_description: string;
            $stack: string;
        }
    }
    class ManagerGoogleAssistant {
        /**
         * Synchronize Homey devices with Google Assistant
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @returns { Promise<void> } Successful response
         */
        sync(opts?: any): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { boolean } opts.value
         * @returns { Promise<void> } Successful response
         */
        setOptionEnabled(opts?: {
            value: boolean;
        }): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @returns { Promise<void> } Successful response
         */
        getOptionEnabled(opts?: any): Promise<void>;
    }
    namespace ManagerGoogleAssistant {
        /**
         *
         * @memberof HomeyAPI.ManagerGoogleAssistant
         * @property { number } code
         * @property { string } error
         * @property { string } error_description
         * @property { string } $stack
         * @hideconstructor
         */
        class Error {
            code: number;
            error: string;
            error_description: string;
            $stack: string;
        }
    }
    class ManagerI18n {
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.value
         * @returns { Promise<void> } Successful response
         */
        setOptionLanguage(opts?: {
            value: string;
        }): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @returns { Promise<void> } Successful response
         */
        getOptionLanguage(opts?: any): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.value  -  ("metric")
         * @returns { Promise<void> } Successful response
         */
        setOptionUnits(opts?: {
            value: string;
        }): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @returns { Promise<void> } Successful response
         */
        getOptionUnits(opts?: any): Promise<void>;
        /**
         * Translates an i18n-object (e.g. `{ en: 'My String', nl: 'Mijn tekst' }` to a string
         * Uses the default language when getConfig has not been called prior to this method.
         * @param {Object} input
         * @returns {string}
         */
        __(input: any): string;
    }
    namespace ManagerI18n {
        /**
         *
         * @memberof HomeyAPI.ManagerI18n
         * @property { number } code
         * @property { string } error
         * @property { string } error_description
         * @property { string } $stack
         * @hideconstructor
         */
        class Error {
            code: number;
            error: string;
            error_description: string;
            $stack: string;
        }
    }
    class ManagerImages {
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.device<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { HomeyAPI.ManagerImages.Image } [opts.filter] - A response filter (Using a filter will bypass all caches, use sparingely)
         * @returns { Promise<Object.<string, HomeyAPI.ManagerImages.Image>> } Successful response
         */
        getImages(opts?: {
            filter?: HomeyAPI.ManagerImages.Image;
        }): Promise<{
            [key: string]: HomeyAPI.ManagerImages.Image;
        }>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.device<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @returns { Promise<HomeyAPI.ManagerImages.Image> } Successful response
         */
        getImage(opts?: {
            id: string;
        }): Promise<HomeyAPI.ManagerImages.Image>;
        /**
         * Unsubscribes to realtime events, clear all caches, and remove all event listeners for this manager and it's managed objects
         */
        destroy(): void;
    }
    namespace ManagerImages {
        /**
         *
         * @memberof HomeyAPI.ManagerImages
         * @property { number } code
         * @property { string } error
         * @property { string } error_description
         * @property { string } $stack
         * @hideconstructor
         */
        class Error {
            code: number;
            error: string;
            error_description: string;
            $stack: string;
        }
        /**
         *
         * @memberof HomeyAPI.ManagerImages
         * @property { string } id
         * @property { string } ownerUri
         * @property { string } url
         * @property { string } lastUpdated
         * @hideconstructor
         */
        class Image {
            /**
             * Gets the full URL to this image, including hostname
             */
            fullUrl: any;
            id: string;
            ownerUri: string;
            url: string;
            lastUpdated: string;
        }
    }
    class ManagerInsights {
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.insights.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { HomeyAPI.ManagerInsights.Log } [opts.filter] - A response filter (Using a filter will bypass all caches, use sparingely)
         * @returns { Promise<HomeyAPI.ManagerInsights.Log[]> } Successful response
         */
        getLogs(opts?: {
            filter?: HomeyAPI.ManagerInsights.Log;
        }): Promise<HomeyAPI.ManagerInsights.Log[]>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.insights<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @returns { Promise<void> } Successful response
         */
        deleteLogs(opts?: any): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.insights.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.uri
         * @param { string } opts.id
         * @returns { Promise<HomeyAPI.ManagerInsights.Log> } Successful response
         */
        getLog(opts?: {
            uri: string;
            id: string;
        }): Promise<HomeyAPI.ManagerInsights.Log>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.insights<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.uri
         * @param { string } opts.id
         * @param { HomeyAPI.ManagerInsights.Log } opts.log
         * @returns { Promise<void> } Successful response
         */
        updateLog(opts?: {
            uri: string;
            id: string;
            log: HomeyAPI.ManagerInsights.Log;
        }): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.insights<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.uri
         * @param { string } opts.id
         * @returns { Promise<void> } Successful response
         */
        deleteLog(opts?: {
            uri: string;
            id: string;
        }): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.insights.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.uri
         * @param { string } opts.id
         * @param { string } [opts.resolution]  - The timespan to query ("lastHour" | "lastHourLowRes" | "last6Hours" | "last6HoursLowRes" | "last24Hours" | "last3Days" | "last7Days" | "last14Days" | "last31Days" | "last3Months" | "last6Months" | "last2Years" | "today" | "thisWeek" | "thisMonth" | "thisYear" | "yesterday" | "lastWeek" | "lastMonth" | "lastYear")
         * @returns { Promise<object> } Successful response
         */
        getLogEntries(opts?: {
            uri: string;
            id: string;
            resolution?: string;
        }): Promise<object>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.insights<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.uri
         * @param { string } opts.id
         * @returns { Promise<void> } Successful response
         */
        deleteLogEntries(opts?: {
            uri: string;
            id: string;
        }): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.insights.readonly<br/>
         * </p>
         * @since 1.5.0
         * @param {object} [opts] - Named parameters
         * @returns { Promise<void> } Successful response
         */
        getStorageInfo(opts?: any): Promise<void>;
        /**
         * Unsubscribes to realtime events, clear all caches, and remove all event listeners for this manager and it's managed objects
         */
        destroy(): void;
    }
    namespace ManagerInsights {
        /**
         *
         * @memberof HomeyAPI.ManagerInsights
         * @property { number } code
         * @property { string } error
         * @property { string } error_description
         * @property { string } $stack
         * @hideconstructor
         */
        class Error {
            code: number;
            error: string;
            error_description: string;
            $stack: string;
        }
        /**
         *
         * @memberof HomeyAPI.ManagerInsights
         * @property { string } uri
         * @property { string } id
         * @property { string } title
         * @property { string } type  ("number" | "boolean")
         * @property { string } units
         * @property { number } decimals
         * @property { number } lastValue
         * @hideconstructor
         */
        class Log {
            uri: string;
            id: string;
            title: string;
            /**
             * ("number" | "boolean")
            */
            type: string;
            units: string;
            decimals: number;
            lastValue: number;
        }
    }
    class ManagerLedring {
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @returns { Promise<void> } Successful response
         */
        getScreensavers(opts?: any): Promise<void>;
        /**
         * Gets this manager's state
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @returns { Promise<object> } The state of this manager
         */
        getState(opts?: any): Promise<object>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { number } opts.value
         * @returns { Promise<void> } Successful response
         */
        setOptionBrightness(opts?: {
            value: number;
        }): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @returns { Promise<void> } Successful response
         */
        getOptionBrightness(opts?: any): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { object } opts.value
         * @param { string } opts.value.uri
         * @param { string } opts.value.id
         * @returns { Promise<void> } Successful response
         */
        setOptionScreensaver(opts?: {
            value: {
                uri: string;
                id: string;
            };
        }): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @returns { Promise<void> } Successful response
         */
        getOptionScreensaver(opts?: any): Promise<void>;
        /**
         * Unsubscribes to realtime events, clear all caches, and remove all event listeners for this manager and it's managed objects
         */
        destroy(): void;
    }
    namespace ManagerLedring {
        /**
         *
         * @memberof HomeyAPI.ManagerLedring
         * @property { number } code
         * @property { string } error
         * @property { string } error_description
         * @property { string } $stack
         * @hideconstructor
         */
        class Error {
            code: number;
            error: string;
            error_description: string;
            $stack: string;
        }
    }
    class ManagerLogic {
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.logic.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { HomeyAPI.ManagerLogic.Variable } [opts.filter] - A response filter (Using a filter will bypass all caches, use sparingely)
         * @returns { Promise<Object.<string, HomeyAPI.ManagerLogic.Variable>> } Successful response
         */
        getVariables(opts?: {
            filter?: HomeyAPI.ManagerLogic.Variable;
        }): Promise<{
            [key: string]: HomeyAPI.ManagerLogic.Variable;
        }>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.logic.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @returns { Promise<HomeyAPI.ManagerLogic.Variable> } Successful response
         */
        getVariable(opts?: {
            id: string;
        }): Promise<HomeyAPI.ManagerLogic.Variable>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.logic<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @param { HomeyAPI.ManagerLogic.Variable } opts.variable
         * @returns { Promise<HomeyAPI.ManagerLogic.Variable> } Successful response
         */
        updateVariable(opts?: {
            id: string;
            variable: HomeyAPI.ManagerLogic.Variable;
        }): Promise<HomeyAPI.ManagerLogic.Variable>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.logic<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @returns { Promise<void> } Successful response
         */
        deleteVariable(opts?: {
            id: string;
        }): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.logic<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { HomeyAPI.ManagerLogic.Variable } opts.variable
         * @returns { Promise<HomeyAPI.ManagerLogic.Variable> } Successful response
         */
        createVariable(opts?: {
            variable: HomeyAPI.ManagerLogic.Variable;
        }): Promise<HomeyAPI.ManagerLogic.Variable>;
        /**
         *
         * @param {object} [opts] - Named parameters
         * @param { object } [opts.event]
         * @param { object } [opts.tag]
         * @returns { Promise<void> } Successful response
         */
        triggerWebhook(opts?: {
            event?: any;
            tag?: any;
        }): Promise<void>;
        /**
         * Unsubscribes to realtime events, clear all caches, and remove all event listeners for this manager and it's managed objects
         */
        destroy(): void;
    }
    namespace ManagerLogic {
        /**
         *
         * @memberof HomeyAPI.ManagerLogic
         * @property { number } code
         * @property { string } error
         * @property { string } error_description
         * @property { string } $stack
         * @hideconstructor
         */
        class Error {
            code: number;
            error: string;
            error_description: string;
            $stack: string;
        }
        /**
         *
         * @memberof HomeyAPI.ManagerLogic
         * @property { string } id
         * @property { string } name
         * @property { string } type  ("string" | "number" | "boolean")
         * @property { object } value Should be the same type as defined in the `type` property.
         * @hideconstructor
         */
        class Variable {
            id: string;
            name: string;
            /**
             * ("string" | "number" | "boolean")
            */
            type: string;
            /**
             * Should be the same type as defined in the `type` property.
            */
            value: any;
        }
    }
    class ManagerMobile {
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.device.readonly<br/>
         *  - homey.flow.readonly<br/>
         *  - homey.user.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @returns { Promise<void> } Successful response
         */
        getSummary(opts?: any): Promise<void>;
    }
    namespace ManagerMobile {
        /**
         *
         * @memberof HomeyAPI.ManagerMobile
         * @property { number } code
         * @property { string } error
         * @property { string } error_description
         * @property { string } $stack
         * @hideconstructor
         */
        class Error {
            code: number;
            error: string;
            error_description: string;
            $stack: string;
        }
    }
    class ManagerMoods {
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.mood.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { HomeyAPI.ManagerMoods.Mood } [opts.filter] - A response filter (Using a filter will bypass all caches, use sparingely)
         * @returns { Promise<Object.<string, HomeyAPI.ManagerMoods.Mood>> } Successful response
         */
        getMoods(opts?: {
            filter?: HomeyAPI.ManagerMoods.Mood;
        }): Promise<{
            [key: string]: HomeyAPI.ManagerMoods.Mood;
        }>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.mood<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { HomeyAPI.ManagerMoods.Mood } opts.mood
         * @returns { Promise<void> } Successful response
         */
        createMood(opts?: {
            mood: HomeyAPI.ManagerMoods.Mood;
        }): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.mood.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @returns { Promise<HomeyAPI.ManagerMoods.Mood> } Successful response
         */
        getMood(opts?: {
            id: string;
        }): Promise<HomeyAPI.ManagerMoods.Mood>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.mood<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @param { HomeyAPI.ManagerMoods.Mood } opts.mood
         * @returns { Promise<void> } Successful response
         */
        updateMood(opts?: {
            id: string;
            mood: HomeyAPI.ManagerMoods.Mood;
        }): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.mood<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @returns { Promise<void> } Successful response
         */
        deleteMood(opts?: {
            id: string;
        }): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.mood.start<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @param { object } [opts.state]
         * @returns { Promise<void> } Successful response
         */
        triggerMood(opts?: {
            id: string;
            state?: any;
        }): Promise<void>;
        /**
         * Unsubscribes to realtime events, clear all caches, and remove all event listeners for this manager and it's managed objects
         */
        destroy(): void;
    }
    namespace ManagerMoods {
        /**
         *
         * @memberof HomeyAPI.ManagerMoods
         * @property { number } code
         * @property { string } error
         * @property { string } error_description
         * @property { string } $stack
         * @hideconstructor
         */
        class Error {
            code: number;
            error: string;
            error_description: string;
            $stack: string;
        }
        /**
         *
         * @memberof HomeyAPI.ManagerMoods
         * @property { string } id
         * @property { string } name
         * @property { string } zone
         * @property { string } icon
         * @property { object[] } devices
         * @property { string } devices.id
         * @property { object } devices.state
         * @hideconstructor
         */
        class Mood {
            id: string;
            name: string;
            zone: string;
            icon: string;
            devices: {
                id: string;
                state: any;
            };
        }
    }
    class ManagerNotifications {
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.notifications.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { HomeyAPI.ManagerNotifications.Notification } [opts.filter] - A response filter (Using a filter will bypass all caches, use sparingely)
         * @returns { Promise<Object.<string, HomeyAPI.ManagerNotifications.Notification>> } Successful response
         */
        getNotifications(opts?: {
            filter?: HomeyAPI.ManagerNotifications.Notification;
        }): Promise<{
            [key: string]: HomeyAPI.ManagerNotifications.Notification;
        }>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.notifications.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @returns { Promise<HomeyAPI.ManagerNotifications.Notification> } Successful response
         */
        getNotification(opts?: {
            id: string;
        }): Promise<HomeyAPI.ManagerNotifications.Notification>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.notifications<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @returns { Promise<void> } Successful response
         */
        deleteNotification(opts?: {
            id: string;
        }): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.notifications.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @returns { Promise<void> } Successful response
         */
        setNotificationRead(opts?: {
            id: string;
        }): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.notifications<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } [opts.ownerUri]
         * @returns { Promise<void> } Successful response
         */
        deleteNotifications(opts?: {
            ownerUri?: string;
        }): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.notifications.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @returns { Promise<void> } Successful response
         */
        getOwners(opts?: any): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.notifications<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.uri
         * @param { boolean } opts.enabled
         * @returns { Promise<void> } Successful response
         */
        setOwnerEnabled(opts?: {
            uri: string;
            enabled: boolean;
        }): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.notifications<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.uri
         * @param { boolean } opts.push
         * @returns { Promise<void> } Successful response
         */
        setOwnerPush(opts?: {
            uri: string;
            push: boolean;
        }): Promise<void>;
        /**
         * Unsubscribes to realtime events, clear all caches, and remove all event listeners for this manager and it's managed objects
         */
        destroy(): void;
    }
    namespace ManagerNotifications {
        /**
         *
         * @memberof HomeyAPI.ManagerNotifications
         * @property { number } code
         * @property { string } error
         * @property { string } error_description
         * @property { string } $stack
         * @hideconstructor
         */
        class Error {
            code: number;
            error: string;
            error_description: string;
            $stack: string;
        }
        /**
         *
         * @memberof HomeyAPI.ManagerNotifications
         * @property { string } id
         * @property { string } ownerUri
         * @property { object } dateCreated
         * @property { string } dateExpires
         * @property { string } excerpt
         * @property { string } icon
         * @property { object } iconObj
         * @property { string } iconObj.id
         * @property { string } iconObj.url
         * @property { string } priority
         * @property { string[] } readBy
         * @property { string[] } roles
         * @property { object } meta Free-form metadata of the notification
         * @hideconstructor
         */
        class Notification {
            id: string;
            ownerUri: string;
            dateCreated: any;
            dateExpires: string;
            excerpt: string;
            icon: string;
            iconObj: {
                id: string;
                url: string;
            };
            priority: string;
            readBy: string[];
            roles: string[];
            /**
             * Free-form metadata of the notification
            */
            meta: any;
        }
    }
    class ManagerPresence {
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.presence.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @returns { Promise<void> } Successful response
         */
        getPresent(opts?: {
            id: string;
        }): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.presence<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @param { boolean } [opts.value]
         * @returns { Promise<void> } Successful response
         */
        setPresent(opts?: {
            id: string;
            value?: boolean;
        }): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.presence.self<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { boolean } [opts.value]
         * @param { object } [opts.opts]
         * @param { boolean } [opts.opts.forceFlowTrigger]
         * @returns { Promise<void> } Successful response
         */
        setPresentMe(opts?: {
            value?: boolean;
            opts?: {
                forceFlowTrigger?: boolean;
            };
        }): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.presence.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @returns { Promise<void> } Successful response
         */
        getAsleep(opts?: {
            id: string;
        }): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.presence<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @param { boolean } [opts.value]
         * @returns { Promise<void> } Successful response
         */
        setAsleep(opts?: {
            id: string;
            value?: boolean;
        }): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.presence.self<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { boolean } [opts.value]
         * @param { object } [opts.opts]
         * @param { boolean } [opts.opts.forceFlowTrigger]
         * @returns { Promise<void> } Successful response
         */
        setAsleepMe(opts?: {
            value?: boolean;
            opts?: {
                forceFlowTrigger?: boolean;
            };
        }): Promise<void>;
    }
    namespace ManagerPresence {
        /**
         *
         * @memberof HomeyAPI.ManagerPresence
         * @property { number } code
         * @property { string } error
         * @property { string } error_description
         * @property { string } $stack
         * @hideconstructor
         */
        class Error {
            code: number;
            error: string;
            error_description: string;
            $stack: string;
        }
    }
    class ManagerReports {
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.insights.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @returns { Promise<void> } Successful response
         */
        getMonthlyReport(opts?: {
            id: string;
        }): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.insights.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @returns { Promise<void> } Successful response
         */
        getMonthlyReportSummary(opts?: any): Promise<void>;
    }
    namespace ManagerReports {
        /**
         *
         * @memberof HomeyAPI.ManagerReports
         * @property { number } code
         * @property { string } error
         * @property { string } error_description
         * @property { string } $stack
         * @hideconstructor
         */
        class Error {
            code: number;
            error: string;
            error_description: string;
            $stack: string;
        }
    }
    class ManagerRF {
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { number } [opts.timeout]
         * @param { string } [opts.frequency]  -  ("433" | "868" | "ir")
         * @returns { Promise<void> } Successful response
         */
        record(opts?: {
            timeout?: number;
            frequency?: string;
        }): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } [opts.frequency]  -  ("433" | "868" | "ir")
         * @param { number[] } [opts.data]
         * @returns { Promise<void> } Successful response
         */
        emulate(opts?: {
            frequency?: string;
            data?: number[];
        }): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } [opts.payload]
         * @param { number } [opts.repetitions]
         * @returns { Promise<void> } Successful response
         */
        txInfraredProntohex(opts?: {
            payload?: string;
            repetitions?: number;
        }): Promise<void>;
    }
    namespace ManagerRF {
        /**
         *
         * @memberof HomeyAPI.ManagerRF
         * @property { number } code
         * @property { string } error
         * @property { string } error_description
         * @property { string } $stack
         * @hideconstructor
         */
        class Error {
            code: number;
            error: string;
            error_description: string;
            $stack: string;
        }
    }
    class ManagerSessions {
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.user.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { HomeyAPI.ManagerSessions.Session } [opts.filter] - A response filter (Using a filter will bypass all caches, use sparingely)
         * @returns { Promise<Object.<string, HomeyAPI.ManagerSessions.Session>> } Successful response
         */
        getSessions(opts?: {
            filter?: HomeyAPI.ManagerSessions.Session;
        }): Promise<{
            [key: string]: HomeyAPI.ManagerSessions.Session;
        }>;
        /**
         *
         * @param {object} [opts] - Named parameters
         * @returns { Promise<HomeyAPI.ManagerSessions.Session> } Successful response
         */
        getSessionMe(opts?: any): Promise<HomeyAPI.ManagerSessions.Session>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.user.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @returns { Promise<void> } Successful response
         */
        deleteSession(opts?: {
            id: string;
        }): Promise<void>;
    }
    namespace ManagerSessions {
        /**
         *
         * @memberof HomeyAPI.ManagerSessions
         * @property { number } code
         * @property { string } error
         * @property { string } error_description
         * @property { string } $stack
         * @hideconstructor
         */
        class Error {
            code: number;
            error: string;
            error_description: string;
            $stack: string;
        }
        /**
         *
         * @memberof HomeyAPI.ManagerSessions
         * @property { string } id
         * @property { string } type  ("OAUTH" | "APP")
         * @property { string } agent
         * @property { string } clientName
         * @property { string[] } scopes These are the requested scopes
         * @property { string[] } intersectedScopes These are the actual available scopes. This is an intersection between the requested scopes and the user's scopes.
         * @property { string } createdAt
         * @property { string } expiresAt
         * @property { boolean } lastUsed
         * @hideconstructor
         */
        class Session {
            /**
             * Checks if this session has a scope
             * @param {string} scope - The required scope
             * @return {boolean} true if the scope is available, false otherwise
             */
            hasScope(scope: string): boolean;
            /**
             * Checks if this session has all of the supplied scopes
             * @param {string[]} scopes - A list of required scopes
             * @return {boolean} true if the scopes are available, false otherwise
             */
            hasScopes(scopes: string[]): boolean;
            id: string;
            /**
             * ("OAUTH" | "APP")
            */
            type: string;
            agent: string;
            clientName: string;
            /**
             * These are the requested scopes
            */
            scopes: string[];
            /**
             * These are the actual available scopes. This is an intersection between the requested scopes and the user's scopes.
            */
            intersectedScopes: string[];
            createdAt: string;
            expiresAt: string;
            lastUsed: boolean;
        }
    }
    class ManagerSpeechOutput {
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.speech<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.text
         * @param { string } [opts.session]
         * @param { number } [opts.timeout]
         * @param { boolean } [opts.synthesize]
         * @returns { Promise<void> } Successful response
         */
        say(opts?: {
            text: string;
            session?: string;
            timeout?: number;
            synthesize?: boolean;
        }): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { HomeyAPI.ManagerSpeechOutput.Voice } [opts.filter] - A response filter (Using a filter will bypass all caches, use sparingely)
         * @returns { Promise<Object.<string, HomeyAPI.ManagerSpeechOutput.Voice>> } Successful response
         */
        getVoices(opts?: {
            filter?: HomeyAPI.ManagerSpeechOutput.Voice;
        }): Promise<{
            [key: string]: HomeyAPI.ManagerSpeechOutput.Voice;
        }>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @returns { Promise<HomeyAPI.ManagerSpeechOutput.Voice> } Successful response
         */
        getVoice(opts?: {
            id: string;
        }): Promise<HomeyAPI.ManagerSpeechOutput.Voice>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @returns { Promise<void> } Successful response
         */
        uninstallVoice(opts?: {
            id: string;
        }): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @returns { Promise<void> } Successful response
         */
        installVoice(opts?: {
            id: string;
        }): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @returns { Promise<void> } Successful response
         */
        playVoiceSample(opts?: {
            id: string;
        }): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.value  -  ("very_slow" | "slow" | "normal" | "fast" | "very_fast")
         * @returns { Promise<void> } Successful response
         */
        setOptionSpeed(opts?: {
            value: string;
        }): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @returns { Promise<void> } Successful response
         */
        getOptionSpeed(opts?: any): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.value
         * @returns { Promise<void> } Successful response
         */
        setOptionVoice(opts?: {
            value: string;
        }): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @returns { Promise<void> } Successful response
         */
        getOptionVoice(opts?: any): Promise<void>;
        /**
         * Unsubscribes to realtime events, clear all caches, and remove all event listeners for this manager and it's managed objects
         */
        destroy(): void;
    }
    namespace ManagerSpeechOutput {
        /**
         *
         * @memberof HomeyAPI.ManagerSpeechOutput
         * @property { number } code
         * @property { string } error
         * @property { string } error_description
         * @property { string } $stack
         * @hideconstructor
         */
        class Error {
            code: number;
            error: string;
            error_description: string;
            $stack: string;
        }
        /**
         *
         * @memberof HomeyAPI.ManagerSpeechOutput
         * @property { string } id
         * @property { string } name
         * @property { string } language
         * @property { string } locale
         * @property { string } gender  ("male" | "female")
         * @hideconstructor
         */
        class Voice {
            id: string;
            name: string;
            language: string;
            locale: string;
            /**
             * ("male" | "female")
            */
            gender: string;
        }
    }
    class ManagerSystem {
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @returns { Promise<void> } Successful response
         */
        getInfo(opts?: any): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @returns { Promise<void> } Successful response
         */
        getSystemName(opts?: any): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.name
         * @returns { Promise<void> } Successful response
         */
        setSystemName(opts?: {
            name: string;
        }): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @returns { Promise<void> } Successful response
         */
        getStorageInfo(opts?: any): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @returns { Promise<void> } Successful response
         */
        getMemoryInfo(opts?: any): Promise<void>;
        /**
         *
         * @param {object} [opts] - Named parameters
         * @param { string } [opts.append]
         * @returns { Promise<void> } Successful response
         */
        sendLog(opts?: {
            append?: string;
        }): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @returns { Promise<void> } Successful response
         */
        reboot(opts?: any): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @returns { Promise<void> } Successful response
         */
        rebootRecovery(opts?: any): Promise<void>;
        /**
         *
         * @param {object} [opts] - Named parameters
         * @param { string } [opts.id]  - The Cloud ID of the Homey you are trying to reach
         * @returns { Promise<void> } Successful response
         */
        ping(opts?: {
            id?: string;
        }): Promise<void>;
        /**
         * Sets a custom debug mask (overrides default)
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.mask
         * @returns { Promise<void> } Successful response
         */
        setDebug(opts?: {
            mask: string;
        }): Promise<void>;
    }
    namespace ManagerSystem {
        /**
         *
         * @memberof HomeyAPI.ManagerSystem
         * @property { number } code
         * @property { string } error
         * @property { string } error_description
         * @property { string } $stack
         * @hideconstructor
         */
        class Error {
            code: number;
            error: string;
            error_description: string;
            $stack: string;
        }
    }
    class ManagerUpdates {
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.updates.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @returns { Promise<void> } Successful response
         */
        getWhatsNew(opts?: any): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.updates.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @returns { Promise<void> } Successful response
         */
        setWhatsNewRead(opts?: {
            id: string;
        }): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.updates.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { boolean } [opts.cache]
         * @param { string } [opts.flags]
         * @returns { Promise<void> } Successful response
         */
        getUpdates(opts?: {
            cache?: boolean;
            flags?: string;
        }): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.updates<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @returns { Promise<void> } Successful response
         */
        installUpdate(opts?: any): Promise<void>;
        /**
         * Gets this manager's state
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.updates.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @returns { Promise<object> } The state of this manager
         */
        getState(opts?: any): Promise<object>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.updates<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.value  -  ("stable" | "beta")
         * @returns { Promise<void> } Successful response
         */
        setOptionChannel(opts?: {
            value: string;
        }): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.updates.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @returns { Promise<void> } Successful response
         */
        getOptionChannel(opts?: any): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.updates<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { boolean } opts.value
         * @returns { Promise<void> } Successful response
         */
        setOptionAutoupdate(opts?: {
            value: boolean;
        }): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.updates.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @returns { Promise<void> } Successful response
         */
        getOptionAutoupdate(opts?: any): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.updates<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.value
         * @returns { Promise<void> } Successful response
         */
        setOptionForceChannel(opts?: {
            value: string;
        }): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.updates.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @returns { Promise<void> } Successful response
         */
        getOptionForceChannel(opts?: any): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.updates<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string[] } opts.value
         * @returns { Promise<void> } Successful response
         */
        setOptionUpdateNotifications(opts?: {
            value: string[];
        }): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.updates.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @returns { Promise<void> } Successful response
         */
        getOptionUpdateNotifications(opts?: any): Promise<void>;
        /**
         * Unsubscribes to realtime events, clear all caches, and remove all event listeners for this manager and it's managed objects
         */
        destroy(): void;
    }
    namespace ManagerUpdates {
        /**
         *
         * @memberof HomeyAPI.ManagerUpdates
         * @property { number } code
         * @property { string } error
         * @property { string } error_description
         * @property { string } $stack
         * @hideconstructor
         */
        class Error {
            code: number;
            error: string;
            error_description: string;
            $stack: string;
        }
    }
    class ManagerUsers {
        /**
         * Exchange a delegation token for a session bearer token
         * @param {object} [opts] - Named parameters
         * @param { string } opts.token
         * @returns { Promise<string> } A Bearer token, to be used by the authorization header
         */
        login(opts?: {
            token: string;
        }): Promise<string>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.user.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { HomeyAPI.ManagerUsers.User } [opts.filter] - A response filter (Using a filter will bypass all caches, use sparingely)
         * @returns { Promise<Object.<string, HomeyAPI.ManagerUsers.User>> } Successful response
         */
        getUsers(opts?: {
            filter?: HomeyAPI.ManagerUsers.User;
        }): Promise<{
            [key: string]: HomeyAPI.ManagerUsers.User;
        }>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.user<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { HomeyAPI.ManagerUsers.User } opts.user
         * @returns { Promise<void> } Successful response
         */
        createUser(opts?: {
            user: HomeyAPI.ManagerUsers.User;
        }): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.user.self<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @returns { Promise<HomeyAPI.ManagerUsers.User> } Successful response
         */
        getUserMe(opts?: any): Promise<HomeyAPI.ManagerUsers.User>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.user.self<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { object } [opts.name]
         * @param { object } [opts.email]
         * @returns { Promise<HomeyAPI.ManagerUsers.User> } Successful response
         */
        updateUserMe(opts?: {
            name?: any;
            email?: any;
        }): Promise<HomeyAPI.ManagerUsers.User>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.user.self<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @returns { Promise<void> } Successful response
         */
        deleteUserMe(opts?: any): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.user.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @returns { Promise<HomeyAPI.ManagerUsers.User> } Successful response
         */
        getUser(opts?: {
            id: string;
        }): Promise<HomeyAPI.ManagerUsers.User>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.user<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @param { HomeyAPI.ManagerUsers.User } opts.user
         * @returns { Promise<HomeyAPI.ManagerUsers.User> } Successful response
         */
        updateUser(opts?: {
            id: string;
            user: HomeyAPI.ManagerUsers.User;
        }): Promise<HomeyAPI.ManagerUsers.User>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.user<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @returns { Promise<void> } Successful response
         */
        deleteUser(opts?: {
            id: string;
        }): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.user.self<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @param { object } opts.value
         * @returns { Promise<void> } Successful response
         */
        updateUserMeProperties(opts?: {
            id: string;
            value: any;
        }): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.user.self<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @returns { Promise<void> } Successful response
         */
        deleteUserMeProperties(opts?: {
            id: string;
        }): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.user<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.newOwnerUserId
         * @returns { Promise<void> } Successful response
         */
        swapOwner(opts?: {
            newOwnerUserId: string;
        }): Promise<void>;
        /**
         * Gets this manager's state
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.user.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @returns { Promise<object> } The state of this manager
         */
        getState(opts?: any): Promise<object>;
        /**
         * Unsubscribes to realtime events, clear all caches, and remove all event listeners for this manager and it's managed objects
         */
        destroy(): void;
    }
    namespace ManagerUsers {
        /**
         *
         * @memberof HomeyAPI.ManagerUsers
         * @property { number } code
         * @property { string } error
         * @property { string } error_description
         * @property { string } $stack
         * @hideconstructor
         */
        class Error {
            code: number;
            error: string;
            error_description: string;
            $stack: string;
        }
        /**
         *
         * @memberof HomeyAPI.ManagerUsers
         * @property { string } id
         * @property { string } name
         * @property { string } athomId
         * @property { object } properties
         * @property { boolean } enabled
         * @property { boolean } verified
         * @property { string } role  ("manager" | "user" | "guest")
         * @property { boolean } present
         * @property { boolean } asleep
         * @hideconstructor
         */
        class User {
            id: string;
            name: string;
            athomId: string;
            properties: any;
            enabled: boolean;
            verified: boolean;
            /**
             * ("manager" | "user" | "guest")
            */
            role: string;
            present: boolean;
            asleep: boolean;
        }
    }
    class ManagerWeather {
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.geolocation.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @returns { Promise<void> } Successful response
         */
        getWeather(opts?: any): Promise<void>;
        /**
         * Unsubscribes to realtime events, clear all caches, and remove all event listeners for this manager and it's managed objects
         */
        destroy(): void;
    }
    namespace ManagerWeather {
        /**
         *
         * @memberof HomeyAPI.ManagerWeather
         * @property { number } code
         * @property { string } error
         * @property { string } error_description
         * @property { string } $stack
         * @hideconstructor
         */
        class Error {
            code: number;
            error: string;
            error_description: string;
            $stack: string;
        }
    }
    class ManagerZigBee {
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.command
         * @param { object } [opts.opts]
         * @returns { Promise<void> } Successful response
         */
        runCommand(opts?: {
            command: string;
            opts?: any;
        }): Promise<void>;
        /**
         * Gets this manager's state
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @returns { Promise<object> } The state of this manager
         */
        getState(opts?: any): Promise<object>;
        /**
         * Unsubscribes to realtime events, clear all caches, and remove all event listeners for this manager and it's managed objects
         */
        destroy(): void;
    }
    namespace ManagerZigBee {
        /**
         *
         * @memberof HomeyAPI.ManagerZigBee
         * @property { number } code
         * @property { string } error
         * @property { string } error_description
         * @property { string } $stack
         * @hideconstructor
         */
        class Error {
            code: number;
            error: string;
            error_description: string;
            $stack: string;
        }
    }
    class ManagerZones {
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.zone.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { HomeyAPI.ManagerZones.Zone } [opts.filter] - A response filter (Using a filter will bypass all caches, use sparingely)
         * @returns { Promise<Object.<string, HomeyAPI.ManagerZones.Zone>> } Successful response
         */
        getZones(opts?: {
            filter?: HomeyAPI.ManagerZones.Zone;
        }): Promise<{
            [key: string]: HomeyAPI.ManagerZones.Zone;
        }>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.zone<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { HomeyAPI.ManagerZones.Zone } opts.zone
         * @returns { Promise<void> } Successful response
         */
        createZone(opts?: {
            zone: HomeyAPI.ManagerZones.Zone;
        }): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.zone.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @returns { Promise<HomeyAPI.ManagerZones.Zone> } Successful response
         */
        getZone(opts?: {
            id: string;
        }): Promise<HomeyAPI.ManagerZones.Zone>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.zone<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @param { HomeyAPI.ManagerZones.Zone } opts.zone
         * @returns { Promise<void> } Successful response
         */
        updateZone(opts?: {
            id: string;
            zone: HomeyAPI.ManagerZones.Zone;
        }): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.zone<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.id
         * @returns { Promise<void> } Successful response
         */
        deleteZone(opts?: {
            id: string;
        }): Promise<void>;
        /**
         * Unsubscribes to realtime events, clear all caches, and remove all event listeners for this manager and it's managed objects
         */
        destroy(): void;
    }
    namespace ManagerZones {
        /**
         *
         * @memberof HomeyAPI.ManagerZones
         * @property { number } code
         * @property { string } error
         * @property { string } error_description
         * @property { string } $stack
         * @hideconstructor
         */
        class Error {
            code: number;
            error: string;
            error_description: string;
            $stack: string;
        }
        /**
         *
         * @memberof HomeyAPI.ManagerZones
         * @property { string } id
         * @property { string } name
         * @property { number } order
         * @property { string } parent
         * @property { boolean } active
         * @property { string } icon
         * @hideconstructor
         */
        class Zone {
            id: string;
            name: string;
            order: number;
            parent: string;
            active: boolean;
            icon: string;
        }
    }
    class ManagerZwave {
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.command
         * @param { object } [opts.opts]
         * @returns { Promise<void> } Successful response
         */
        runCommand(opts?: {
            command: string;
            opts?: any;
        }): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system<br/>
         * </p>
         * @since 1.5.6
         * @param {object} [opts] - Named parameters
         * @param { boolean } opts.enabled
         * @returns { Promise<void> } Successful response
         */
        setLogEnabled(opts?: {
            enabled: boolean;
        }): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @returns { Promise<void> } Successful response
         */
        getLog(opts?: any): Promise<void>;
        /**
         *
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @param { string } opts.region  -  ("ANZ" | "CN" | "EU" | "HK" | "IL" | "IN" | "JP" | "KR" | "RU" | "US")
         * @returns { Promise<void> } Successful response
         */
        updateRegion(opts?: {
            region: string;
        }): Promise<void>;
        /**
         * Gets this manager's state
         * <p>
         * <b>Required OAuth scopes:</b><br/>
         *  - homey.system.readonly<br/>
         * </p>
         * @param {object} [opts] - Named parameters
         * @returns { Promise<object> } The state of this manager
         */
        getState(opts?: any): Promise<object>;
        /**
         * Unsubscribes to realtime events, clear all caches, and remove all event listeners for this manager and it's managed objects
         */
        destroy(): void;
    }
    namespace ManagerZwave {
        /**
         *
         * @memberof HomeyAPI.ManagerZwave
         * @property { number } code
         * @property { string } error
         * @property { string } error_description
         * @property { string } $stack
         * @hideconstructor
         */
        class Error {
            code: number;
            error: string;
            error_description: string;
            $stack: string;
        }
    }
}

/**
 * Represents the Athom Apps API
 * @param {object} [opts] - An options object
 * @param {string} [opts.secret] - Authorization secret
 * @param {string} [opts.baseUrl] - A custom baseUrl
 */
declare class AthomAppsAPI {
    constructor(opts?: {
        secret?: string;
        baseUrl?: string;
    });
    /**
     * Update an archive
     * @param {object} [opts] - Named parameters
     * @param { string } opts.archiveId
     * @param { string } opts.state
     * @param { string } [opts.error]
     * @param { object } [opts.manifest]
     * @param { string } [opts.assetsId]
     * @param { string } [opts.hash]
     * @param { number } [opts.size]
     * @returns { Promise<void> } Success
     */
    updateArchive(opts?: {
        archiveId: string;
        state: string;
        error?: string;
        manifest?: any;
        assetsId?: string;
        hash?: string;
        size?: number;
    }): Promise<void>;
    /**
     *
     * @param {object} [opts] - Named parameters
     * @param { number } [opts.page]
     * @param { number } [opts.count]
     * @param { string } [opts.category]
     * @param { string } [opts.author]
     * @returns { Promise<object[]> } Success
     */
    getApps(opts?: {
        page?: number;
        count?: number;
        category?: string;
        author?: string;
    }): Promise<object[]>;
    /**
     *
     * @param {object} [opts] - Named parameters
     * @param { string } opts.query
     * @param { string } [opts.language]
     * @param { string } [opts.homeyVersion]
     * @param { string } [opts.homeyPlatform]
     * @param { string } [opts.homeyPlatformVersion]
     * @param { string } [opts.homeyModel]
     * @returns { Promise<object[]> } Success
     */
    searchApps(opts?: {
        query: string;
        language?: string;
        homeyVersion?: string;
        homeyPlatform?: string;
        homeyPlatformVersion?: string;
        homeyModel?: string;
    }): Promise<object[]>;
    /**
     *
     * @param {object} [opts] - Named parameters
     * @param { string } [opts.language]
     * @param { string } opts.homeyVersion
     * @param { string } opts.homeyPlatform
     * @param { number[] } opts.payload
     * @returns { Promise<object[]> } Success
     */
    searchAppsBy433MhzSignal(opts?: {
        language?: string;
        homeyVersion: string;
        homeyPlatform: string;
        payload: number[];
    }): Promise<object[]>;
    /**
     *
     * @param {object} [opts] - Named parameters
     * @param { string } [opts.query]
     * @param { string } [opts.language]
     * @param { string[] } [opts.platform]
     * @param { string[] } [opts.connectivity]
     * @param { string[] } [opts.category]
     * @param { number } [opts.limit]
     * @param { number } [opts.offset]
     * @returns { Promise<object[]> } Success
     */
    browseApps(opts?: {
        query?: string;
        language?: string;
        platform?: string[];
        connectivity?: string[];
        category?: string[];
        limit?: number;
        offset?: number;
    }): Promise<object[]>;
    /**
     *
     * @param {object} [opts] - Named parameters
     * @returns { Promise<object[]> } Success
     */
    syncApps(opts?: any): Promise<object[]>;
    /**
     *
     * @param {object} [opts] - Named parameters
     * @param { string } opts.secret
     * @returns { Promise<object> } Success
     */
    getAppsSummary(opts?: {
        secret: string;
    }): Promise<object>;
    /**
     *
     * @param {object} [opts] - Named parameters
     * @param { string } [opts.platforms]
     * @returns { Promise<object> } Success
     */
    getHighlightedApps(opts?: {
        platforms?: string;
    }): Promise<object>;
    /**
     *
     * @param {object} [opts] - Named parameters
     * @param { string[] } [opts.platform]
     * @param { string } [opts.language]
     * @param { string[] } [opts.tags]
     * @returns { Promise<object> } Success
     */
    getHighlightedAppsV2(opts?: {
        platform?: string[];
        language?: string;
        tags?: string[];
    }): Promise<object>;
    /**
     *
     * @param {object} [opts] - Named parameters
     * @returns { Promise<object[]> } Success
     */
    getMyApps(opts?: any): Promise<object[]>;
    /**
     *
     * @param {object} [opts] - Named parameters
     * @returns { Promise<object[]> } Success
     */
    getAllLiveAppIDs(opts?: any): Promise<object[]>;
    /**
     *
     * @param {object} [opts] - Named parameters
     * @returns { Promise<object[]> } Success
     */
    getReviewApps(opts?: any): Promise<object[]>;
    /**
     *
     * @param {object} [opts] - Named parameters
     * @param { string } opts.appId
     * @returns { Promise<AthomAppsAPI.App> } Success
     */
    getApp(opts?: {
        appId: string;
    }): Promise<AthomAppsAPI.App>;
    /**
     *
     * @param {object} [opts] - Named parameters
     * @param { string } opts.appId
     * @returns { Promise<void> } Success
     */
    deleteApp(opts?: {
        appId: string;
    }): Promise<void>;
    /**
     *
     * @param {object} [opts] - Named parameters
     * @param { string } opts.appId
     * @returns { Promise<void> } Success
     */
    getAppChangelog(opts?: {
        appId: string;
    }): Promise<void>;
    /**
     *
     * @param {object} [opts] - Named parameters
     * @param { string } opts.appId
     * @param { string } opts.userId  - The User ID of the new author.
     * @returns { Promise<void> } Success
     */
    updateAppAuthor(opts?: {
        appId: string;
        userId: string;
    }): Promise<void>;
    /**
     *
     * @param {object} [opts] - Named parameters
     * @param { string } opts.appId
     * @param { string } [opts.channel]
     * @param { string } [opts.version]
     * @param { string } opts.secret
     * @returns { Promise<object> } Success
     */
    getAppInstall(opts?: {
        appId: string;
        channel?: string;
        version?: string;
        secret: string;
    }): Promise<object>;
    /**
     *
     * @param {object} [opts] - Named parameters
     * @param { string } opts.appId
     * @returns { Promise<object[]> } Success
     */
    getAppInstallStats(opts?: {
        appId: string;
    }): Promise<object[]>;
    /**
     *
     * @param {object} [opts] - Named parameters
     * @param { string } opts.appId
     * @returns { Promise<object> } Success
     */
    getAppDriversStats(opts?: {
        appId: string;
    }): Promise<object>;
    /**
     *
     * @param {object} [opts] - Named parameters
     * @param { string } opts.appId
     * @returns { Promise<AthomAppsAPI.Build[]> } Success
     */
    getBuilds(opts?: {
        appId: string;
    }): Promise<AthomAppsAPI.Build[]>;
    /**
     *
     * @param {object} [opts] - Named parameters
     * @param { string } opts.appId
     * @param { string } opts.version
     * @param { object } opts.env
     * @param { object } opts.changelog
     * @param { string } opts.changelog.en
     * @param { object } opts.readme
     * @param { string } opts.readme.en
     * @returns { Promise<object> } Success
     */
    createBuild(opts?: {
        appId: string;
        version: string;
        env: any;
        changelog: {
            en: string;
        };
        readme: {
            en: string;
        };
    }): Promise<object>;
    /**
     *
     * @param {object} [opts] - Named parameters
     * @param { string } opts.appId
     * @param { string } opts.buildId
     * @returns { Promise<AthomAppsAPI.Build> } Success
     */
    getBuild(opts?: {
        appId: string;
        buildId: string;
    }): Promise<AthomAppsAPI.Build>;
    /**
     *
     * @param {object} [opts] - Named parameters
     * @param { string } opts.appId
     * @param { string } opts.buildId
     * @returns { Promise<void> } Success
     */
    getCrashes(opts?: {
        appId: string;
        buildId: string;
    }): Promise<void>;
    /**
     *
     * @param {object} [opts] - Named parameters
     * @param { string } opts.appId
     * @param { string } opts.buildId
     * @returns { Promise<object[]> } Success
     */
    getCrashesStats(opts?: {
        appId: string;
        buildId: string;
    }): Promise<object[]>;
    /**
     *
     * @param {object} [opts] - Named parameters
     * @param { string } opts.appId
     * @param { string } opts.buildId
     * @param { string } opts.channel
     * @returns { Promise<void> } Success
     */
    updateBuildChannel(opts?: {
        appId: string;
        buildId: string;
        channel: string;
    }): Promise<void>;
    /**
     *
     * @param {object} [opts] - Named parameters
     * @param { string } opts.appId
     * @param { string } opts.buildId
     * @param { boolean } opts.autoRelease
     * @returns { Promise<void> } Success
     */
    createSubmission(opts?: {
        appId: string;
        buildId: string;
        autoRelease: boolean;
    }): Promise<void>;
    /**
     *
     * @param {object} [opts] - Named parameters
     * @param { string } opts.appId
     * @param { string } opts.buildId
     * @returns { Promise<void> } Success
     */
    getSubmissionComments(opts?: {
        appId: string;
        buildId: string;
    }): Promise<void>;
    /**
     *
     * @param {object} [opts] - Named parameters
     * @param { string } opts.appId
     * @param { string } opts.buildId
     * @param { string } opts.text
     * @returns { Promise<void> } Success
     */
    createSubmissionComment(opts?: {
        appId: string;
        buildId: string;
        text: string;
    }): Promise<void>;
    /**
     *
     * @param {object} [opts] - Named parameters
     * @param { string } opts.appId
     * @param { string } opts.buildId
     * @returns { Promise<void> } Success
     */
    retractSubmission(opts?: {
        appId: string;
        buildId: string;
    }): Promise<void>;
    /**
     *
     * @param {object} [opts] - Named parameters
     * @param { string } opts.appId
     * @param { string } opts.buildId
     * @returns { Promise<void> } Success
     */
    approveSubmission(opts?: {
        appId: string;
        buildId: string;
    }): Promise<void>;
    /**
     *
     * @param {object} [opts] - Named parameters
     * @param { string } opts.appId
     * @param { string } opts.buildId
     * @returns { Promise<void> } Success
     */
    rejectSubmission(opts?: {
        appId: string;
        buildId: string;
    }): Promise<void>;
    /**
     *
     * @param {object} [opts] - Named parameters
     * @param { string } opts.appId
     * @returns { Promise<AthomAppsAPI.Review[]> } Success
     */
    getReviews(opts?: {
        appId: string;
    }): Promise<AthomAppsAPI.Review[]>;
    /**
     *
     * @param {object} [opts] - Named parameters
     * @param { string } opts.appId
     * @param { string } opts.version
     * @param { number } opts.rating
     * @param { string } [opts.comment]
     * @returns { Promise<object> } Success
     */
    updateReview(opts?: {
        appId: string;
        version: string;
        rating: number;
        comment?: string;
    }): Promise<object>;
    /**
     *
     * @param {object} [opts] - Named parameters
     * @param { string } opts.appId
     * @returns { Promise<object> } Success
     */
    deleteReview(opts?: {
        appId: string;
    }): Promise<object>;
    /**
     *
     * @param {object} [opts] - Named parameters
     * @param { string } opts.appId
     * @returns { Promise<object[]> } Success
     */
    getReviewsStats(opts?: {
        appId: string;
    }): Promise<object[]>;
    /**
     *
     * @param {object} [opts] - Named parameters
     * @param { string } opts.appId
     * @returns { Promise<object> } Success
     */
    deleteAllReviews(opts?: {
        appId: string;
    }): Promise<object>;
    /**
     *
     * @param {object} [opts] - Named parameters
     * @param { string } opts.appId
     * @param { string } opts.userId
     * @param { string } opts.response
     * @returns { Promise<void> } Success
     */
    updateReviewResponse(opts?: {
        appId: string;
        userId: string;
        response: string;
    }): Promise<void>;
    /**
     *
     * @param {object} [opts] - Named parameters
     * @param { string } opts.appId
     * @param { string } opts.userId
     * @returns { Promise<void> } Success
     */
    deleteReviewResponse(opts?: {
        appId: string;
        userId: string;
    }): Promise<void>;
    /**
     *
     * @param {object} [opts] - Named parameters
     * @param { string } opts.appId
     * @param { string } opts.homeyId
     * @param { string } opts.homeyVersion
     * @param { string } opts.appVersion
     * @param { string } opts.stack
     * @returns { Promise<void> } Success
     */
    createCrash(opts?: {
        appId: string;
        homeyId: string;
        homeyVersion: string;
        appVersion: string;
        stack: string;
    }): Promise<void>;
    /**
     *
     * @param {object} [opts] - Named parameters
     * @param { string } opts.crashId
     * @param { string } opts.subject
     * @param { string } opts.body
     * @param { string } opts.from
     * @returns { Promise<void> } Success
     */
    replyToCrash(opts?: {
        crashId: string;
        subject: string;
        body: string;
        from: string;
    }): Promise<void>;
    /**
     *
     * @param {object} [opts] - Named parameters
     * @param { object[] } [opts.ssdp]
     * @param { object[] } [opts.ble]
     * @param { object[] } [opts.mac]
     * @param { object[] } [opts.mdnsSd]
     * @param { string } [opts.mdnsSd.name]
     * @param { string } [opts.mdnsSd.type]
     * @param { object } [opts.mdnsSd.txt]
     * @returns { Promise<void> } Success
     */
    discoverApps(opts?: {
        ssdp?: object[];
        ble?: object[];
        mac?: object[];
        mdnsSd?: {
            name?: string;
            type?: string;
            txt?: any;
        };
    }): Promise<void>;
}

/**
 * Represents the Athom Backup API
 * @param {object} [opts] - An options object
 * @param {string} [opts.baseUrl] - A custom baseUrl
 * @protected
 */
declare class AthomBackupAPI {
    constructor(opts?: {
        baseUrl?: string;
    });
    /**
     * Get all of your own backups
     * @param {object} [opts] - Named parameters
     * @param { string } opts.token
     * @returns { Promise<object> } Success
     */
    getMyBackups(opts?: {
        token: string;
    }): Promise<object>;
    /**
     * Delete one of your own backups
     * @param {object} [opts] - Named parameters
     * @param { string } opts.homeyId
     * @param { string } opts.backupId
     * @param { string } opts.token
     * @returns { Promise<object> } Success
     */
    deleteMyBackup(opts?: {
        homeyId: string;
        backupId: string;
        token: string;
    }): Promise<object>;
    /**
     * Get all of a user's backups
     * @param {object} [opts] - Named parameters
     * @param { string } opts.userId
     * @param { string } opts.secret
     * @returns { Promise<object> } Success
     */
    getBackups(opts?: {
        userId: string;
        secret: string;
    }): Promise<object>;
    /**
     * Delete all of a user's backups
     * @param {object} [opts] - Named parameters
     * @param { string } opts.userId
     * @returns { Promise<object> } Success
     */
    deleteBackups(opts?: {
        userId: string;
    }): Promise<object>;
    /**
     * Get a single backup
     * @param {object} [opts] - Named parameters
     * @param { string } opts.userId
     * @param { string } opts.backupId
     * @param { string } opts.secret
     * @returns { Promise<object> } Success
     */
    getBackup(opts?: {
        userId: string;
        backupId: string;
        secret: string;
    }): Promise<object>;
    /**
     * Create a backup of a user's Homey
     * @param {object} [opts] - Named parameters
     * @param { string } opts.userId
     * @param { string } opts.homeyId
     * @param { string } opts.secret
     * @param { string } opts.homeyName
     * @param { string } [opts.homeyPlatform]
     * @param { number } [opts.homeyPlatformVersion]
     * @param { string } opts.version
     * @param { string } opts.channel
     * @returns { Promise<object> } Success
     */
    createBackup(opts?: {
        userId: string;
        homeyId: string;
        secret: string;
        homeyName: string;
        homeyPlatform?: string;
        homeyPlatformVersion?: number;
        version: string;
        channel: string;
    }): Promise<object>;
    /**
     * Mark a backup of a user's Homey as complete
     * @param {object} [opts] - Named parameters
     * @param { string } opts.userId
     * @param { string } opts.homeyId
     * @param { string } opts.backupId
     * @param { string } opts.secret
     * @param { number } opts.size
     * @param { string } opts.hash
     * @param { object } opts.meta
     * @returns { Promise<object> } Success
     */
    setBackupComplete(opts?: {
        userId: string;
        homeyId: string;
        backupId: string;
        secret: string;
        size: number;
        hash: string;
        meta: any;
    }): Promise<object>;
}

/**
 * Represents the Athom Callback API
 * @param {object} [opts] - An options object
 * @param {string} [opts.baseUrl] - A custom baseUrl
 * @protected
 */
declare class AthomCallbackAPI {
    constructor(opts?: {
        baseUrl?: string;
    });
    /**
     * Register a callback URL.
     * @param {object} [opts] - Named parameters
     * @param { string } opts.callbackUrl  - callback URL
     * @returns { Promise<object> } Success
     */
    registerCallbackUrl(opts?: {
        callbackUrl: string;
    }): Promise<object>;
}

declare class AthomCloudAPI {
    constructor(opts: {
        clientId?: string;
        clientSecret?: string;
        redirectUrl?: string;
        store?: AthomStorageAdapter;
        autoRefreshTokens?: boolean;
        baseUrl?: string;
    });
    /**
     * Request a token to provide third party delegated access to the currently logged in user.
    
     * <p>
     * <b>Required OAuth scopes:</b><br/>
     *  - account.user<br/>
     * </p>
     * @param {object} [opts] - Named parameters
     * @param { string } [opts.audience]  - The target audience
     * @param { object } [opts.meta]  - Metadata to add to the claim
     * @returns { Promise<string> } The requested token
     */
    createDelegationToken(opts?: {
        audience?: string;
        meta?: any;
    }): Promise<string>;
    /**
     * Validates a delegation token and returns its claims
    
     * @param {object} [opts] - Named parameters
     * @param { string } [opts.token]  - The token
     * @returns { Promise<object> } The claims embedded in the token
     */
    verifyDelegationToken(opts?: {
        token?: string;
    }): Promise<object>;
    /**
     * Returns a public key for local token validation
     * @param {object} [opts] - Named parameters
     * @returns { Promise<string> } A PEM public key
     */
    getDelegationTokenKey(opts?: any): Promise<string>;
    /**
     * Get an OAuth2 access token through various grants.
    
     * @param {object} [opts] - Named parameters
     * @param { string } opts.clientId  - OAuth2 client ID.
     * @param { string } opts.clientSecret  - OAuth2 client secret.
     * @param { string } opts.grantType  - OAuth2 grant type. ("authorization_code" | "refresh_token" | "client_credentials" | "password")
     * @param { string } [opts.refreshToken]  - OAuth2 refresh token. Required when refresh_token grant is used.
     * @param { string } [opts.code]  - OAuth2 authorization_code. Required when authorization_code grant is used.
     * @param { string } [opts.username]  - Resource owner's username. Required when password grant is used.
     * @param { string } [opts.password]  - Resource owner's password. Required when password grant is used.
     * @returns { Promise<AthomCloudAPI.Token> } Access token, refresh token and expiry information
     */
    getAccessToken(opts?: {
        clientId: string;
        clientSecret: string;
        grantType: string;
        refreshToken?: string;
        code?: string;
        username?: string;
        password?: string;
    }): Promise<AthomCloudAPI.Token>;
    /**
     * Create a token and send it in an email to the user with which it can reset its password.
     * @param {object} [opts] - Named parameters
     * @param { string } opts.email
     * @returns { Promise<void> } A password reset email has been sent
     */
    forgotPassword(opts?: {
        email: string;
    }): Promise<void>;
    /**
     * Add a user.
     * <p>
     * <b>Required OAuth scopes:</b><br/>
     *  - account.user:su<br/>
     * </p>
     * @param {object} [opts] - Named parameters
     * @param { object } opts.user  - User data.
     * @param { string } opts.user.firstname
     * @param { string } opts.user.lastname
     * @param { string } opts.user.email
     * @param { string } opts.user.password
     * @param { string } opts.user.language
     * @param { boolean } [opts.newsletter]  - Set to true to subscribe to newsletter
     * @param { boolean } [opts.gettingStarted]  - Set to false to prevent Getting Started e-mails
     * @returns { Promise<AthomCloudAPI.User> } The newly created user
     */
    createUser(opts?: {
        user: {
            firstname: string;
            lastname: string;
            email: string;
            password: string;
            language: string;
        };
        newsletter?: boolean;
        gettingStarted?: boolean;
    }): Promise<AthomCloudAPI.User>;
    /**
     * Get a user
     * <p>
     * <b>Required OAuth scopes:</b><br/>
     *  - account.user<br/>
     * </p>
     * @param {object} [opts] - Named parameters
     * @param { string } opts.id  - User ID.
     * @returns { Promise<AthomCloudAPI.User> } User data.
     */
    getUser(opts?: {
        id: string;
    }): Promise<AthomCloudAPI.User>;
    /**
     * Update a user
     * <p>
     * <b>Required OAuth scopes:</b><br/>
     *  - account.user<br/>
     * </p>
     * @param {object} [opts] - Named parameters
     * @param { string } opts.id  - User ID.
     * @param { AthomCloudAPI.User } opts.user  - User data.
     * @returns { Promise<AthomCloudAPI.User> } The updated user.
     */
    updateUser(opts?: {
        id: string;
        user: AthomCloudAPI.User;
    }): Promise<AthomCloudAPI.User>;
    /**
     * Delete a user
     * <p>
     * <b>Required OAuth scopes:</b><br/>
     *  - account.user<br/>
     * </p>
     * @param {object} [opts] - Named parameters
     * @param { string } opts.id  - User ID.
     * @param { string } opts.password  - The users password
     * @returns { Promise<void> } Success.
     */
    deleteUser(opts?: {
        id: string;
        password: string;
    }): Promise<void>;
    /**
     * Add a device to a user.
     * <p>
     * <b>Required OAuth scopes:</b><br/>
     *  - account.user<br/>
     * </p>
     * @param {object} [opts] - Named parameters
     * @param { string } opts.userId  - User ID.
     * @param { AthomCloudAPI.UserDevice } opts.device  - Device data.
     * @returns { Promise<AthomCloudAPI.UserDevice> } The created user device.
     */
    createUserDevice(opts?: {
        userId: string;
        device: AthomCloudAPI.UserDevice;
    }): Promise<AthomCloudAPI.UserDevice>;
    /**
     * Update user device data.
     * <p>
     * <b>Required OAuth scopes:</b><br/>
     *  - account.user<br/>
     * </p>
     * @param {object} [opts] - Named parameters
     * @param { string } opts.userId  - User ID.
     * @param { string } opts.deviceId  - Device ID.
     * @param { AthomCloudAPI.UserDevice } opts.device  - Device data to update.
     * @returns { Promise<AthomCloudAPI.UserDevice> } The updated device.
     */
    updateUserDevice(opts?: {
        userId: string;
        deviceId: string;
        device: AthomCloudAPI.UserDevice;
    }): Promise<AthomCloudAPI.UserDevice>;
    /**
     * Delete user device data.
     * <p>
     * <b>Required OAuth scopes:</b><br/>
     *  - account.user<br/>
     * </p>
     * @param {object} [opts] - Named parameters
     * @param { string } opts.userId  - User ID.
     * @param { string } opts.deviceId  - Device ID.
     * @returns { Promise<void> } Success
     */
    deleteUserDevice(opts?: {
        userId: string;
        deviceId: string;
    }): Promise<void>;
    /**
     * Get user addresses
     * <p>
     * <b>Required OAuth scopes:</b><br/>
     *  - account.user.readonly<br/>
     * </p>
     * @param {object} [opts] - Named parameters
     * @param { string } opts.userId  - User ID.
     * @returns { Promise<AthomCloudAPI.UserAddress[]> } All known user addresses.
     */
    getUserAddresses(opts?: {
        userId: string;
    }): Promise<AthomCloudAPI.UserAddress[]>;
    /**
     * Add user address
     * <p>
     * <b>Required OAuth scopes:</b><br/>
     *  - account.user<br/>
     * </p>
     * @param {object} [opts] - Named parameters
     * @param { string } opts.userId  - Homey ID.
     * @param { AthomCloudAPI.UserAddress } [opts.address]  - User data.
     * @returns { Promise<AthomCloudAPI.UserAddress> } The newly created user address.
     */
    addUserAddress(opts?: {
        userId: string;
        address?: AthomCloudAPI.UserAddress;
    }): Promise<AthomCloudAPI.UserAddress>;
    /**
     * Update user address
     * <p>
     * <b>Required OAuth scopes:</b><br/>
     *  - account.user<br/>
     * </p>
     * @param {object} [opts] - Named parameters
     * @param { string } opts.userId  - Homey ID.
     * @param { string } opts.addressId  - Address ID.
     * @param { AthomCloudAPI.UserAddress } [opts.address]  - Address data.
     * @returns { Promise<AthomCloudAPI.UserAddress> } The updated user address.
     */
    updateUserAddress(opts?: {
        userId: string;
        addressId: string;
        address?: AthomCloudAPI.UserAddress;
    }): Promise<AthomCloudAPI.UserAddress>;
    /**
     * Delete a user address
     * <p>
     * <b>Required OAuth scopes:</b><br/>
     *  - account.user<br/>
     * </p>
     * @param {object} [opts] - Named parameters
     * @param { string } opts.userId  - User ID.
     * @param { string } opts.addressId  - Address ID.
     * @returns { Promise<void> } Success.
     */
    deleteUserAddress(opts?: {
        userId: string;
        addressId: string;
    }): Promise<void>;
    /**
     * Update user subscription
     * <p>
     * <b>Required OAuth scopes:</b><br/>
     *  - account.user.subscription:su<br/>
     * </p>
     * @param {object} [opts] - Named parameters
     * @param { string } opts.userId  - Homey ID.
     * @param { string } opts.subscriptionId  - Subscription ID.
     * @param { AthomCloudAPI.UserSubscription } [opts.subscription]
     * @returns { Promise<void> } Success
     */
    updateUserSubscription(opts?: {
        userId: string;
        subscriptionId: string;
        subscription?: AthomCloudAPI.UserSubscription;
    }): Promise<void>;
    /**
     * Delete a user subscription
     * <p>
     * <b>Required OAuth scopes:</b><br/>
     *  - account.user.subscription:su<br/>
     * </p>
     * @param {object} [opts] - Named parameters
     * @param { string } opts.userId  - User ID.
     * @param { string } opts.subscriptionId  - Subscription ID.
     * @returns { Promise<void> } Success.
     */
    deleteUserSubscription(opts?: {
        userId: string;
        subscriptionId: string;
    }): Promise<void>;
    /**
     * Add the `app_developer_trusted` role.
     * <p>
     * <b>Required OAuth scopes:</b><br/>
     *  - account.user:su<br/>
     * </p>
     * @param {object} [opts] - Named parameters
     * @param { string } opts.userId  - User ID.
     * @returns { Promise<void> } Success.
     */
    addRoleAppDeveloperTrusted(opts?: {
        userId: string;
    }): Promise<void>;
    /**
     * Remove the `app_developer_trusted` role.
     * <p>
     * <b>Required OAuth scopes:</b><br/>
     *  - account.user:su<br/>
     * </p>
     * @param {object} [opts] - Named parameters
     * @param { string } opts.userId  - User ID.
     * @returns { Promise<void> } Success.
     */
    removeRoleAppDeveloperTrusted(opts?: {
        userId: string;
    }): Promise<void>;
    /**
     * User associated with provided credentials.
     * <p>
     * <b>Required OAuth scopes:</b><br/>
     *  - account.user.readonly<br/>
     * </p>
     * @param {object} [opts] - Named parameters
     * @param { string } [opts.additionalScopes]  - Comma seperated list of additional scopes to require.
     * @returns { Promise<AthomCloudAPI.User> } Associated user account
     */
    getAuthenticatedUser(opts?: {
        additionalScopes?: string;
    }): Promise<AthomCloudAPI.User>;
    /**
     * Change the password of the authenticated user and invalidates all oAuth2 sessions.
     * <p>
     * <b>Required OAuth scopes:</b><br/>
     *  - account.user<br/>
     * </p>
     * @param {object} [opts] - Named parameters
     * @param { string } opts.password
     * @param { string } opts.oldPassword
     * @returns { Promise<void> } When the password has been changed
     */
    updateAuthenticatedUserPassword(opts?: {
        password: string;
        oldPassword: string;
    }): Promise<void>;
    /**
     * Get user data
     * @param {object} [opts] - Named parameters
     * @param { string } opts.userId  - User ID or E-mail.
     * @returns { Promise<AthomCloudAPI.UserProfile> } User profile
     */
    getUserProfile(opts?: {
        userId: string;
    }): Promise<AthomCloudAPI.UserProfile>;
    /**
     * Get user sessions
     * <p>
     * <b>Required OAuth scopes:</b><br/>
     *  - account.user.readonly<br/>
     * </p>
     * @param {object} [opts] - Named parameters
     * @param { string } opts.userId  - User ID
     * @returns { Promise<void> } User sessions
     */
    getUserSessions(opts?: {
        userId: string;
    }): Promise<void>;
    /**
     * Delete a user's session
     * <p>
     * <b>Required OAuth scopes:</b><br/>
     *  - account.user.readonly<br/>
     * </p>
     * @param {object} [opts] - Named parameters
     * @param { string } opts.userId  - User ID
     * @param { string } opts.sessionId  - Session ID
     * @returns { Promise<void> } User sessions
     */
    deleteUserSession(opts?: {
        userId: string;
        sessionId: string;
    }): Promise<void>;
    /**
     * Obtain a list of Bridges
     * <p>
     * <b>Required OAuth scopes:</b><br/>
     *  - bridge.readonly:su<br/>
     * </p>
     * @param {object} [opts] - Named parameters
     * @param { string } [opts.serial]  - Unique Serial Number
     * @param { string } [opts.serialHash]  - Unique Serial Number Hash (SHA256)
     * @returns { Promise<AthomCloudAPI.Bridge[]> } An Array of Bridges
     */
    getBridges(opts?: {
        serial?: string;
        serialHash?: string;
    }): Promise<AthomCloudAPI.Bridge[]>;
    /**
     * Create a new Bridge
     * <p>
     * <b>Required OAuth scopes:</b><br/>
     *  - bridge:su<br/>
     * </p>
     * @param {object} [opts] - Named parameters
     * @param { AthomCloudAPI.Bridge } [opts.bridge]  - Bridge
     * @returns { Promise<AthomCloudAPI.Bridge> } The newly created Bridge
     */
    createBridge(opts?: {
        bridge?: AthomCloudAPI.Bridge;
    }): Promise<AthomCloudAPI.Bridge>;
    /**
     * Get a Bridge
     * <p>
     * <b>Required OAuth scopes:</b><br/>
     *  - bridge:su<br/>
     * </p>
     * @param {object} [opts] - Named parameters
     * @param { string } opts.serial  - Unique Serial Number
     * @returns { Promise<AthomCloudAPI.Bridge> } A Bridge
     */
    getBridge(opts?: {
        serial: string;
    }): Promise<AthomCloudAPI.Bridge>;
    /**
     * Update a Bridge
     * <p>
     * <b>Required OAuth scopes:</b><br/>
     *  - bridge:su<br/>
     * </p>
     * @param {object} [opts] - Named parameters
     * @param { string } opts.serial  - Unique Serial Number
     * @param { AthomCloudAPI.Bridge } [opts.bridge]  - Bridge
     * @returns { Promise<AthomCloudAPI.Bridge> } The updated Bridge
     */
    updateBridge(opts?: {
        serial: string;
        bridge?: AthomCloudAPI.Bridge;
    }): Promise<AthomCloudAPI.Bridge>;
    /**
     * Activate a Bridge
     * <p>
     * <b>Required OAuth scopes:</b><br/>
     *  - bridge:su<br/>
     * </p>
     * @param {object} [opts] - Named parameters
     * @param { string } opts.serial  - Unique Serial Number
     * @param { string } opts.homeyId
     * @param { string } opts.userId
     * @returns { Promise<void> } Success
     */
    activateBridge(opts?: {
        serial: string;
        homeyId: string;
        userId: string;
    }): Promise<void>;
    /**
     * Obtain a list of Homeys (paginated by 100 results)
     * <p>
     * <b>Required OAuth scopes:</b><br/>
     *  - account.homeys.readonly<br/>
     * </p>
     * @param {object} [opts] - Named parameters
     * @param { string } [opts.serial]  - Homey SN.
     * @param { string } [opts.softwareVersion]  - Homey software version.
     * @param { string } [opts.search]  - Freetext search
     * @param { string } [opts.page]  - The page
     * @returns { Promise<AthomCloudAPI.Homey[]> } An Array of Homeys
     */
    getHomeys(opts?: {
        serial?: string;
        softwareVersion?: string;
        search?: string;
        page?: string;
    }): Promise<AthomCloudAPI.Homey[]>;
    /**
     * Create a new homey
     * <p>
     * <b>Required OAuth scopes:</b><br/>
     *  - account.homeys:su<br/>
     * </p>
     * @param {object} [opts] - Named parameters
     * @param { AthomCloudAPI.Homey } [opts.data]  - Homey data.
     * @returns { Promise<AthomCloudAPI.Homey> } The newly created Homey
     */
    createHomey(opts?: {
        data?: AthomCloudAPI.Homey;
    }): Promise<AthomCloudAPI.Homey>;
    /**
     * Get a single homey
     * <p>
     * <b>Required OAuth scopes:</b><br/>
     *  - account.homeys:su<br/>
     * </p>
     * @param {object} [opts] - Named parameters
     * @param { string } opts.id  - Homey Cloud ID.
     * @returns { Promise<AthomCloudAPI.Homey> } Homey data
     */
    getHomey(opts?: {
        id: string;
    }): Promise<AthomCloudAPI.Homey>;
    /**
     * Update a Homey
     * <p>
     * <b>Required OAuth scopes:</b><br/>
     *  - account.homeys<br/>
     * </p>
     * @param {object} [opts] - Named parameters
     * @param { string } opts.id  - The Homey Cloud ID.
     * @param { AthomCloudAPI.Homey } opts.homey  - Homey data to update.
     * @returns { Promise<AthomCloudAPI.Homey> } The updated Homey
     */
    updateHomey(opts?: {
        id: string;
        homey: AthomCloudAPI.Homey;
    }): Promise<AthomCloudAPI.Homey>;
    /**
     * Delete a homey
     * <p>
     * <b>Required OAuth scopes:</b><br/>
     *  - account.homeys:su<br/>
     * </p>
     * @param {object} [opts] - Named parameters
     * @param { string } opts.id  - Homey Cloud ID.
     * @returns { Promise<void> } On successful deletion
     */
    deleteHomey(opts?: {
        id: string;
    }): Promise<void>;
    /**
     * Activate a Homey
     * <p>
     * <b>Required OAuth scopes:</b><br/>
     *  - account.homeys:su<br/>
     * </p>
     * @param {object} [opts] - Named parameters
     * @param { string } opts.id  - Homey ID
     * @param { string } opts.userId
     * @returns { Promise<void> } Success
     */
    activateHomey(opts?: {
        id: string;
        userId: string;
    }): Promise<void>;
    /**
     * Add a Homey license
     * <p>
     * <b>Required OAuth scopes:</b><br/>
     *  - account.homeys:su<br/>
     * </p>
     * @param {object} [opts] - Named parameters
     * @param { string } opts.homeyId  - Homey Cloud ID.
     * @param { string } opts.license
     * @returns { Promise<void> } Success
     */
    addHomeyLicense(opts?: {
        homeyId: string;
        license: string;
    }): Promise<void>;
    /**
     * Create a Homey user
     * <p>
     * <b>Required OAuth scopes:</b><br/>
     *  - account.homeys:su<br/>
     * </p>
     * @param {object} [opts] - Named parameters
     * @param { string } opts.homeyId  - Homey Cloud ID.
     * @param { string } opts.user  - User ID.
     * @param { string } opts.role  - Role on Homey. ("regular" | "owner")
     * @param { string } [opts.token]  - User token.
     * @returns { Promise<void> } Success
     */
    createHomeyUser(opts?: {
        homeyId: string;
        user: string;
        role: string;
        token?: string;
    }): Promise<void>;
    /**
     * Delete a Homey user
     * <p>
     * <b>Required OAuth scopes:</b><br/>
     *  - account.homeys<br/>
     * </p>
     * @param {object} [opts] - Named parameters
     * @param { string } opts.homeyId  - Homey ID.
     * @param { string } opts.userId  - User ID.
     * @returns { Promise<void> } Success
     */
    deleteHomeyUser(opts?: {
        homeyId: string;
        userId: string;
    }): Promise<void>;
    /**
     * Delete all Homey users
     * <p>
     * <b>Required OAuth scopes:</b><br/>
     *  - account.homeys:su<br/>
     * </p>
     * @param {object} [opts] - Named parameters
     * @param { string } opts.homeyId  - Homey ID.
     * @returns { Promise<void> } Success
     */
    resetHomeyUsers(opts?: {
        homeyId: string;
    }): Promise<void>;
    /**
     * Get all Homey associated metadata
     * @param {object} [opts] - Named parameters
     * @param { string } opts.homeyId  - Homey ID.
     * @returns { Promise<object> } Object with all metadata as key-value pairs
     */
    getAllHomeyMetadata(opts?: {
        homeyId: string;
    }): Promise<object>;
    /**
     * Get Homey metadata
     * <p>
     * <b>Required OAuth scopes:</b><br/>
     *  - account.homeys.metadata:su<br/>
     * </p>
     * @param {object} [opts] - Named parameters
     * @param { string } opts.homeyId  - Homey ID.
     * @param { string } opts.key  - Metadata key.
     * @returns { Promise<object> } Metadata value
     */
    getHomeyMetadata(opts?: {
        homeyId: string;
        key: string;
    }): Promise<object>;
    /**
     * Add Homey metadata
     * <p>
     * <b>Required OAuth scopes:</b><br/>
     *  - account.homeys.metadata:su<br/>
     * </p>
     * @param {object} [opts] - Named parameters
     * @param { string } opts.homeyId  - Homey ID.
     * @param { string } opts.key  - Metadata key.
     * @param { object } [opts.value]  - Metadata value.
     * @returns { Promise<void> } Success.
     */
    createHomeyMetadata(opts?: {
        homeyId: string;
        key: string;
        value?: any;
    }): Promise<void>;
    /**
     * Update Homey metadata
     * <p>
     * <b>Required OAuth scopes:</b><br/>
     *  - account.homeys.metadata:su<br/>
     * </p>
     * @param {object} [opts] - Named parameters
     * @param { string } opts.homeyId  - Homey ID.
     * @param { string } opts.key  - Metadata key.
     * @param { object } [opts.value]  - Metadata value.
     * @returns { Promise<AthomCloudAPI.HomeyMetadata> } All metadata.
     */
    updateHomeyMetadata(opts?: {
        homeyId: string;
        key: string;
        value?: any;
    }): Promise<AthomCloudAPI.HomeyMetadata>;
    /**
     * Delete Homey associated metadata
     * <p>
     * <b>Required OAuth scopes:</b><br/>
     *  - account.homeys.metadata:su<br/>
     * </p>
     * @param {object} [opts] - Named parameters
     * @param { string } opts.homeyId  - Homey ID.
     * @param { string } opts.key  - Metadata key.
     * @returns { Promise<void> } Success
     */
    deleteHomeyMetadata(opts?: {
        homeyId: string;
        key: string;
    }): Promise<void>;
    /**
     * Send formatted email through Athom's mail servers
     * <p>
     * <b>Required OAuth scopes:</b><br/>
     *  - email.send<br/>
     * </p>
     * @param {object} [opts] - Named parameters
     * @param { string } [opts.to]  - Delivery email address.
     * @param { string } [opts.toHomeyOwner]  - Homey ID to send an email to the owner.
     * @param { string } [opts.from]  - Sender email address (and optionally display name).
     * @param { string } opts.subject  - Email subject.
     * @param { string } opts.body  - Email body.
     * @param { string } [opts.replyTo]  - Reply-to email address.
     * @param { object } [opts.header]
     * @param { string } [opts.header.url]
     * @param { string } [opts.header.title]
     * @param { string } [opts.header.prefix]
     * @param { object } [opts.button]
     * @param { string } [opts.button.url]
     * @param { string } [opts.button.title]
     * @returns { Promise<void> } Success.
     */
    sendFormattedEmail(opts?: {
        to?: string;
        toHomeyOwner?: string;
        from?: string;
        subject: string;
        body: string;
        replyTo?: string;
        header?: {
            url?: string;
            title?: string;
            prefix?: string;
        };
        button?: {
            url?: string;
            title?: string;
        };
    }): Promise<void>;
    /**
     * Add a user to a MailChimp list
     * <p>
     * <b>Required OAuth scopes:</b><br/>
     *  - email.send<br/>
     * </p>
     * @param {object} [opts] - Named parameters
     * @param { string } opts.listId  - The ID of the MailChimp list.
     * @param { string } opts.userId  - User ID to add to the MailChimp list
     * @returns { Promise<void> } Success.
     */
    subscribeUserToMailChimp(opts?: {
        listId: string;
        userId: string;
    }): Promise<void>;
    /**
     *
     * <p>
     * <b>Required OAuth scopes:</b><br/>
     *  - apps.statistics<br/>
     * </p>
     * @param {object} [opts] - Named parameters
     * @returns { Promise<object> } Apps grouped by id->version->platform
     */
    getAppInstallsStatistics(opts?: any): Promise<object>;
    /**
     *
     * <p>
     * <b>Required OAuth scopes:</b><br/>
     *  - apps.statistics<br/>
     * </p>
     * @param {object} [opts] - Named parameters
     * @returns { Promise<object> } Drivers grouped by App ID and install count
     */
    getAppDriversStatistics(opts?: any): Promise<object>;
    /**
     *
     * <p>
     * <b>Required OAuth scopes:</b><br/>
     *  - account.statistics<br/>
     * </p>
     * @param {object} [opts] - Named parameters
     * @returns { Promise<object[]> } Locations
     */
    getLocationStatistics(opts?: any): Promise<object[]>;
    /**
     * Obtain a list of Homeys
     * <p>
     * <b>Required OAuth scopes:</b><br/>
     *  - account.statistics<br/>
     * </p>
     * @param {object} [opts] - Named parameters
     * @returns { Promise<Object.<string, number>> } version to count map
     */
    getVersionStatistics(opts?: any): Promise<{
        [key: string]: number;
    }>;
    /**
     * Obtain a list of Homeys
     * <p>
     * <b>Required OAuth scopes:</b><br/>
     *  - account.statistics<br/>
     * </p>
     * @param {object} [opts] - Named parameters
     * @param { string } [opts.min]  - lower date boundary (ISO)
     * @param { string } [opts.max]  - upper date boundary (ISO)
     * @returns { Promise<Object.<string, number>> } date to count map (per hour)
     */
    getProductionStatistics(opts?: {
        min?: string;
        max?: string;
    }): Promise<{
        [key: string]: number;
    }>;
    /**
     * Obtain a list of owner emails for Homeys
     * <p>
     * <b>Required OAuth scopes:</b><br/>
     *  - account.statistics<br/>
     *  - account.user.readonly:su<br/>
     * </p>
     * @param {object} [opts] - Named parameters
     * @param { string } [opts.softwareVersion]  - Homey Software Version
     * @param { string } [opts.homeyId]
     * @param { string } [opts.homeySn]
     * @param { string } [opts.barcodeMin]
     * @param { string } [opts.barcodeMax]
     * @param { string } [opts.appId]
     * @param { string } [opts.appChannel]
     * @param { string } [opts.appVersion]
     * @param { number } [opts.page]  - page number
     * @returns { Promise<object[]> } list of homey owner details (paginated)
     */
    getHomeyOwnerContactDetails(opts?: {
        softwareVersion?: string;
        homeyId?: string;
        homeySn?: string;
        barcodeMin?: string;
        barcodeMax?: string;
        appId?: string;
        appChannel?: string;
        appVersion?: string;
        page?: number;
    }): Promise<object[]>;
    /**
     * A cached version of {@link AthomCloudAPI#getAuthenticatedUser getAuthenticatedUser}.<br/>
     *
     * If no cached version is available, this call invokes {@link AthomCloudAPI#getAuthenticatedUser getAuthenticatedUser}.<br/>
     *
     * The cached version only contains a subset of the {@link AthomCloudAPI.User} properties,
     * and has a <tt>_cached: true</tt> property to indicate the User might be outdated.
     * @returns {AthomCloudAPI.User}
     */
    getAuthenticatedUserCached(): AthomCloudAPI.User;
    /**
     * Returns true if the user is logged in, false otherwise.
     * Attempts to refresh tokens if needed.
     * @returns {boolean}
     */
    isLoggedIn(): boolean;
    /**
     * Logs out from the Athom API
     * @param {AthomCloudAPI.Token} token - An OAuth2 auth token object
     * @fires AthomCloudAPI#logout
     */
    logout(token: AthomCloudAPI.Token): void;
    /**
     * Sets the authentication status of the API
     * @param {AthomCloudAPI.Token} token - An OAuth2 auth token object
     * @return {AthomCloudAPI.Token} The (possibly refreshed) authTokens object or null if the token was invalid
     * @fires AthomCloudAPI#logout
     */
    setToken(token: AthomCloudAPI.Token): AthomCloudAPI.Token;
    /**
     * Authenticate using a username and password
     * @param {string} username
     * @param {string} password
     * @return {AthomCloudAPI.Token} The authState object
     * @protected
     */
    protected authenticateWithPassword(username: string, password: string): AthomCloudAPI.Token;
    /**
     * Returns true if an authorization code is present
     * @returns {boolean} true if an authorization code is present as query parameter
     */
    hasAuthorizationCode(): boolean;
    /**
     * Returns true if a delegated login is present. If true, getLoginUrl() will return an url that automatically authenticates the delegated user.
     * @returns {boolean} true if a delegtion token is present as query parameter
     */
    hasDelegatedLogin(): boolean;
    /**
     * Authenticate using an oauth2 authorizationCode
     * @param {string} [authorizationCode]
     * @return {AthomCloudAPI.Token} The authState object
     */
    authenticateWithAuthorizationCode(authorizationCode?: string): AthomCloudAPI.Token;
    /**
     * Authenticate using client-credentials only
     * @return {AthomCloudAPI.Token} The authState object
     */
    authenticateWithClientCredentials(): AthomCloudAPI.Token;
    /**
     * Returns an URL to a third party service with appended preselection options
     * @param {object} opts - options
     * @param {string} opts.baseUrl - The URL to the third party service
     * @param {string} [opts.resource] - Requested Resource (if already known)
     * @param {string} [opts.state] - The oAuth state parameter for the third party service (if required)
     * @param {string} [opts.audience] - The delegation audience (if required)
     * @param {string} [opts.meta] - The delegation claim metadata (if required)
     * @return {string} Url to the login page
     */
    getDelegatedLoginUrl(opts: {
        baseUrl: string;
        resource?: string;
        state?: string;
        audience?: string;
        meta?: string;
    }): string;
    /**
     * Returns an URL to the OAuth2 login page
     * @param {object} [opts] - options
     * @param {string[]} [opts.scopes] - Requested Scopes (if subset from client scopes)
     * @param {string} [opts.resource] - Requested Resource (if already known)
     * @param {string} [opts.state] - State query parameter provided to callback
     * @param {string} [opts.userToken] - User Delegation token to skip selection of users
     * @return {string} Url to the login page
     */
    getLoginUrl(opts?: {
        scopes?: string[];
        resource?: string;
        state?: string;
        userToken?: string;
    }): string;
    /**
     * Enables automatic access token token refreshing
     */
    enableAutoRefreshTokens(): void;
    /**
     * Disables automatic access token token refreshing
     */
    disableAutoRefreshTokens(): void;
    /**
     * Force a refresh of the API tokens
     * @param {string} [token] The refresh token to use instead of the internal one.
     * @return {AthomCloudAPI.Token} The authState object
     */
    refreshTokens(token?: string): AthomCloudAPI.Token;
    /**
     * Sets the global client configuration, can be overridden
     * @param {object} opts - An options object
     * @param {string} opts.clientId - The OAuth2 clientID
     * @param {string} opts.clientSecret - The OAuth2 clientSecret
     * @param {boolean} opts.autoRefreshTokens - Set to false to disable automatic token refreshing
     */
    static setConfig(opts: {
        clientId: string;
        clientSecret: string;
        autoRefreshTokens: boolean;
    }): void;
}

declare class AthomConnectAPI {
    constructor(opts?: any);
    /**
     * Ping a Homey
     * @param {object} [opts] - Named parameters
     * @param { string } opts.homeyId
     * @returns { Promise<string> } Success
     */
    ping(opts?: {
        homeyId: string;
    }): Promise<string>;
    /**
     * Accept a sharing request
     * @param {object} [opts] - Named parameters
     * @param { string } opts.homeyId
     * @param { string } opts.athomId  - The athom user ID of the user that accepted the sharing request
     * @param { string } opts.inviteToken  - The invitation token
     * @returns { Promise<string> } Success
     */
    acceptSharingRequest(opts?: {
        homeyId: string;
        athomId: string;
        inviteToken: string;
    }): Promise<string>;
    /**
     * Confirm a push notification
     * @param {object} [opts] - Named parameters
     * @param { string } opts.homeyId
     * @param { string } opts.pushId
     * @param { string } opts.choice  - The ID of the made choice
     * @returns { Promise<string> } Success
     */
    confirmPushNotification(opts?: {
        homeyId: string;
        pushId: string;
        choice: string;
    }): Promise<string>;
    /**
     * Queue a mobile event
     * @param {object} [opts] - Named parameters
     * @param { string } [opts.homeyId]  - Use this parameter to select a specific Homey to send the message to
     * @param { string } opts.deviceId  - The device ID
     * @param { string } opts.userId  - The athom cloud User ID
     * @param { string } opts.message  - The message to send
     * @param { string } opts.signature  - The message signature
     * @returns { Promise<string> } Success
     */
    sendMobileEvent(opts?: {
        homeyId?: string;
        deviceId: string;
        userId: string;
        message: string;
        signature: string;
    }): Promise<string>;
    /**
     * Send an OAuth2 code to Homey
     * @param {object} [opts] - Named parameters
     * @param { string } opts.homeyId
     * @param { string } opts.code  - OAuth2 code
     * @param { string } opts.token  - OAuth2 session token
     * @returns { Promise<string> } Success
     */
    sendOAuth2Callback(opts?: {
        homeyId: string;
        code: string;
        token: string;
    }): Promise<string>;
    /**
     * Send a webhook to Homey
     * @param {object} [opts] - Named parameters
     * @param { string } opts.homeyId
     * @param { string } opts.webhookId
     * @param { object } opts.args  - The webhook args object
     * @returns { Promise<string> } Success
     */
    sendWebhook(opts?: {
        homeyId: string;
        webhookId: string;
        args: any;
    }): Promise<string>;
}

/**
 * Represents the Athom DNS API
 * @param {object} [opts] - An options object
 * @param {string} [opts.baseUrl] - A custom baseUrl
 * @protected
 */
declare class AthomDNSAPI {
    constructor(opts?: {
        baseUrl?: string;
    });
    /**
     * Get a certificate for a Homey
     * @param {object} [opts] - Named parameters
     * @param { string } opts.secret
     * @returns { Promise<object> } Success
     */
    getHomeyCertificate(opts?: {
        secret: string;
    }): Promise<object>;
}

/**
 * Represents the Athom Firmware API
 * @param {object} [opts] - An options object
 * @param {string} [opts.baseUrl] - A custom baseUrl
 */
declare class AthomFirmwareAPI {
    constructor(opts?: {
        baseUrl?: string;
    });
    /**
     * Get the changelog of the most recent updates
     * @param {object} [opts] - Named parameters
     * @returns { Promise<object> } Success
     */
    getUpdatesChangelog(opts?: any): Promise<object>;
}

/**
 * Represents the Athom Flow API
 * @param {object} [opts] - An options object
 * @param {string} [opts.baseUrl] - A custom baseUrl
 * @protected
 */
declare class AthomFlowAPI {
    constructor(opts?: {
        baseUrl?: string;
    });
    /**
     * Share a Flow
     * @param {object} [opts] - Named parameters
     * @param { object } opts.data
     * @returns { Promise<object> } Success
     */
    shareFlow(opts?: {
        data: any;
    }): Promise<object>;
    /**
     * Get a Flow
     * @param {object} [opts] - Named parameters
     * @param { string } opts.flowId
     * @returns { Promise<object> } Success
     */
    getFlow(opts?: {
        flowId: string;
    }): Promise<object>;
}

/**
 * Represents the Athom Geolocate API
 * @param {object} [opts] - An options object
 * @param {string} [opts.baseUrl] - A custom baseUrl
 * @protected
 */
declare class AthomGeolocateAPI {
    constructor(opts?: {
        baseUrl?: string;
    });
    /**
     * Get a Homey's geolocation
     * @param {object} [opts] - Named parameters
     * @param { string } opts.homeyId
     * @param { string } opts.homeyIp
     * @param { object[] } opts.towers
     * @param { string } opts.towers.mac
     * @param { number } opts.towers.signal_level
     * @returns { Promise<object> } Success
     */
    getLocation(opts?: {
        homeyId: string;
        homeyIp: string;
        towers: {
            mac: string;
            signal_level: number;
        };
    }): Promise<object>;
}

/**
 * Represents the Athom Notifications API
 * @param {object} [opts] - An options object
 * @param {string} [opts.secret] - Authorization secret
 * @param {string} [opts.baseUrl] - A custom baseUrl
 * @protected
 */
declare class AthomNotificationsAPI {
    constructor(opts?: {
        secret?: string;
        baseUrl?: string;
    });
    /**
     * Send push notification.
     * @param {object} [opts] - Named parameters
     * @param { string } opts.secret
     * @param { object[] } [opts.batch]  - Array of user device objects as returned from Athom API.
     * @param { object } opts.data
     * @param { string } opts.data.type
     * @param { object } opts.data.data  - Notification data (such as payload).
     * @returns { Promise<object> } Success
     */
    push(opts?: {
        secret: string;
        batch?: object[];
        data: {
            type: string;
            data: any;
        };
    }): Promise<object>;
}

/**
 * Represents the Athom Setup API
 * @param {object} [opts] - An options object
 * @param {string} [opts.baseUrl] - A custom baseUrl
 * @protected
 */
declare class AthomSetupAPI {
    constructor(opts?: {
        baseUrl?: string;
    });
    /**
     * Create a new session.
     * @param {object} [opts] - Named parameters
     * @returns { Promise<object> } The generated sessionId.
     */
    createSession(opts?: any): Promise<object>;
    /**
     * Get a session.
     * @param {object} [opts] - Named parameters
     * @param { string } opts.sessionId
     * @returns { Promise<object> } Information for the session.
     */
    getSession(opts?: {
        sessionId: string;
    }): Promise<object>;
    /**
     * Update a session (called by Homey).
     * @param {object} [opts] - Named parameters
     * @param { string } opts.sessionId
     * @param { object } opts.data
     * @param { string } opts.data.sn
     * @returns { Promise<void> } No content.
     */
    updateSession(opts?: {
        sessionId: string;
        data: {
            sn: string;
        };
    }): Promise<void>;
    /**
     * Delete a session.
     * @param {object} [opts] - Named parameters
     * @param { string } opts.sessionId
     * @returns { Promise<void> } No content.
     */
    deleteSession(opts?: {
        sessionId: string;
    }): Promise<void>;
    /**
     * Get a session's Homey state.
     * @param {object} [opts] - Named parameters
     * @param { string } opts.sessionId
     * @returns { Promise<object> } The state of the session.
     */
    getSessionState(opts?: {
        sessionId: string;
    }): Promise<object>;
    /**
     * Set a session's Homey state.
     * @param {object} [opts] - Named parameters
     * @param { string } opts.sessionId
     * @param { object } opts.data
     * @param { string } opts.data.state
     * @returns { Promise<void> } No content.
     */
    setSessionState(opts?: {
        sessionId: string;
        data: {
            state: string;
        };
    }): Promise<void>;
    /**
     * Get a session's commands.
     * @param {object} [opts] - Named parameters
     * @param { string } opts.sessionId
     * @returns { Promise<object> } The session's commands.
     */
    getSessionCommands(opts?: {
        sessionId: string;
    }): Promise<object>;
    /**
     * Create a command for this session.
     * @param {object} [opts] - Named parameters
     * @param { string } opts.sessionId
     * @param { string } opts.manager
     * @param { string } opts.command
     * @param { object } [opts.args]
     * @returns { Promise<string> } The commandId.
     */
    createSessionCommand(opts?: {
        sessionId: string;
        manager: string;
        command: string;
        args?: any;
    }): Promise<string>;
    /**
     * Respond to a command (called by Homey).
     * @param {object} [opts] - Named parameters
     * @param { string } opts.sessionId
     * @param { string } opts.commandId
     * @param { object[] } opts.result
     * @returns { Promise<void> } No content.
     */
    updateSessionCommandResponse(opts?: {
        sessionId: string;
        commandId: string;
        result: object[];
    }): Promise<void>;
    /**
     * Login
     * @param {object} [opts] - Named parameters
     * @param { string } opts.sessionId
     * @param { object } opts.data
     * @param { string } opts.data.token
     * @returns { Promise<void> } No content.
     */
    loginByDelegationToken(opts?: {
        sessionId: string;
        data: {
            token: string;
        };
    }): Promise<void>;
    /**
     * Reset a Homey
     * @param {object} [opts] - Named parameters
     * @param { string } opts.sessionId
     * @param { object } opts.data
     * @param { boolean } opts.data.factoryreset
     * @param { string } opts.data.name
     * @param { string } opts.data.token  - Deprecated as of Homey v2.0.0
     * @param { object } opts.data.extraProperties
     * @returns { Promise<void> } No content.
     */
    updateSessionHomey(opts?: {
        sessionId: string;
        data: {
            factoryreset: boolean;
            name: string;
            token: string;
            extraProperties: any;
        };
    }): Promise<void>;
    /**
     * Get a Homey's voice
     * @param {object} [opts] - Named parameters
     * @param { string } opts.sessionId
     * @param { string } opts.language
     * @returns { Promise<object> } The Homey voice object
     */
    getSessionVoice(opts?: {
        sessionId: string;
        language: string;
    }): Promise<object>;
    /**
     * Get a user's backups
     * @param {object} [opts] - Named parameters
     * @param { string } opts.sessionId
     * @returns { Promise<object[]> } A list of backups
     */
    getSessionBackups(opts?: {
        sessionId: string;
    }): Promise<object[]>;
    /**
     * Get the timezone by IP
     * @param {object} [opts] - Named parameters
     * @returns { Promise<object> } The timezone
     */
    getTimezone(opts?: any): Promise<object>;
}

/**
 * Represents the Athom Store API
 * @param {object} [opts] - An options object
 * @param {string} [opts.baseUrl] - A custom baseUrl
 * @protected
 */
declare class AthomStoreAPI {
    constructor(opts?: {
        baseUrl?: string;
    });
    /**
     * Get store products
     * @param {object} [opts] - Named parameters
     * @returns { Promise<object> } Success
     */
    getProducts(opts?: any): Promise<object>;
    /**
     * Get a store product
     * @param {object} [opts] - Named parameters
     * @param { string } opts.productId
     * @returns { Promise<object> } Success
     */
    getProduct(opts?: {
        productId: string;
    }): Promise<object>;
    /**
     * Get the cart
     * @param {object} [opts] - Named parameters
     * @returns { Promise<object> } Success
     */
    getCart(opts?: any): Promise<object>;
    /**
     * Add a product to the cart
     * @param {object} [opts] - Named parameters
     * @param { string } [opts.sku]
     * @param { number } [opts.quantity]
     * @param { object } [opts.options]
     * @returns { Promise<object> } Success
     */
    addProductToCart(opts?: {
        sku?: string;
        quantity?: number;
        options?: any;
    }): Promise<object>;
    /**
     * Add a product to the cart
     * @param {object} [opts] - Named parameters
     * @param { string } [opts.sku]
     * @param { number } [opts.quantity]
     * @returns { Promise<object> } Success
     */
    setCartProductQuantity(opts?: {
        sku?: string;
        quantity?: number;
    }): Promise<object>;
    /**
     * Remove a product from the cart
     * @param {object} [opts] - Named parameters
     * @param { string } [opts.sku]
     * @returns { Promise<object> } Success
     */
    removeProductFromCart(opts?: {
        sku?: string;
    }): Promise<object>;
    /**
     * Get locales
     * @param {object} [opts] - Named parameters
     * @returns { Promise<object> } Success
     */
    getLocales(opts?: any): Promise<object>;
    /**
     * Set locale
     * @param {object} [opts] - Named parameters
     * @param { string } [opts.locale]
     * @returns { Promise<object> } Success
     */
    setLocale(opts?: {
        locale?: string;
    }): Promise<object>;
    /**
     * Set userdata
     * @param {object} [opts] - Named parameters
     * @param { boolean } [opts.shippingAddress]
     * @param { boolean } [opts.createAccount]
     * @param { boolean } [opts.newsletter]
     * @param { boolean } [opts.isBusiness]
     * @param { string } [opts.email]
     * @param { string } [opts.password]
     * @param { string } [opts.gender]
     * @param { string } [opts.phone]
     * @param { string } [opts.billingFirstname]
     * @param { string } [opts.billingLastname]
     * @param { string } [opts.billingStreet]
     * @param { string } [opts.billingNumber]
     * @param { string } [opts.billingZipcode]
     * @param { string } [opts.billingCity]
     * @param { string } [opts.billingState]
     * @param { string } [opts.billingCountry]
     * @param { string } [opts.billingAddressExtra]
     * @param { string } [opts.shippingFirstname]
     * @param { string } [opts.shippingLastname]
     * @param { string } [opts.shippingStreet]
     * @param { string } [opts.shippingNumber]
     * @param { string } [opts.shippingZipcode]
     * @param { string } [opts.shippingCity]
     * @param { string } [opts.shippingState]
     * @param { string } [opts.shippingCountry]
     * @param { string } [opts.shippingAddressExtra]
     * @param { string } [opts.businessName]
     * @param { string } [opts.businessVat]
     * @returns { Promise<object> } Success
     */
    setUserdata(opts?: {
        shippingAddress?: boolean;
        createAccount?: boolean;
        newsletter?: boolean;
        isBusiness?: boolean;
        email?: string;
        password?: string;
        gender?: string;
        phone?: string;
        billingFirstname?: string;
        billingLastname?: string;
        billingStreet?: string;
        billingNumber?: string;
        billingZipcode?: string;
        billingCity?: string;
        billingState?: string;
        billingCountry?: string;
        billingAddressExtra?: string;
        shippingFirstname?: string;
        shippingLastname?: string;
        shippingStreet?: string;
        shippingNumber?: string;
        shippingZipcode?: string;
        shippingCity?: string;
        shippingState?: string;
        shippingCountry?: string;
        shippingAddressExtra?: string;
        businessName?: string;
        businessVat?: string;
    }): Promise<object>;
    /**
     * Set business
     * @param {object} [opts] - Named parameters
     * @param { boolean } [opts.business]
     * @returns { Promise<object> } Success
     */
    setBusiness(opts?: {
        business?: boolean;
    }): Promise<object>;
    /**
     * Set coupon
     * @param {object} [opts] - Named parameters
     * @param { string } [opts.coupon]
     * @returns { Promise<object> } Success
     */
    setCoupon(opts?: {
        coupon?: string;
    }): Promise<object>;
    /**
     * Set payment method
     * @param {object} [opts] - Named parameters
     * @param { string } [opts.payment]
     * @returns { Promise<object> } Success
     */
    setPayment(opts?: {
        payment?: string;
    }): Promise<object>;
    /**
     * Create an order
     * @param {object} [opts] - Named parameters
     * @returns { Promise<object> } Success
     */
    createOrder(opts?: any): Promise<object>;
    /**
     * Pay an order
     * @param {object} [opts] - Named parameters
     * @param { string } [opts.orderId]
     * @returns { Promise<object> } Success
     */
    payOrder(opts?: {
        orderId?: string;
    }): Promise<object>;
    /**
     * Validate a VAT number
     * @param {object} [opts] - Named parameters
     * @param { string } opts.vat
     * @returns { Promise<boolean> } Success
     */
    validateVat(opts?: {
        vat: string;
    }): Promise<boolean>;
    /**
     * Get an address by zipcode
     * @param {object} [opts] - Named parameters
     * @param { string } opts.zipcode
     * @param { number } opts.number
     * @returns { Promise<object> } Success
     */
    getAddressSuggestion(opts?: {
        zipcode: string;
        number: number;
    }): Promise<object>;
    /**
     * Create a session
     * @param {object} [opts] - Named parameters
     * @returns { Promise<object> } Success
     */
    createSession(opts?: any): Promise<object>;
    /**
     * Delete a session
     * @param {object} [opts] - Named parameters
     * @returns { Promise<object> } Success
     */
    deleteSession(opts?: any): Promise<object>;
    /**
     * Get your orders
     * @param {object} [opts] - Named parameters
     * @returns { Promise<object> } Success
     */
    getOrders(opts?: any): Promise<object>;
    /**
     * Get an order
     * @param {object} [opts] - Named parameters
     * @param { string } opts.orderId
     * @returns { Promise<object> } Success
     */
    getOrder(opts?: {
        orderId: string;
    }): Promise<object>;
    /**
     * Login
     * @param {object} [opts] - Named parameters
     * @param { string } [opts.token]
     * @returns { Promise<object> } Success
     */
    loginByDelegationToken(opts?: {
        token?: string;
    }): Promise<object>;
    /**
     * Logout
     * @param {object} [opts] - Named parameters
     * @returns { Promise<object> } Success
     */
    logout(opts?: any): Promise<object>;
    /**
     * Verify a subscription purchase
     * @param {object} [opts] - Named parameters
     * @param { string } [opts.token]
     * @param { string } opts.sku
     * @param { string } [opts.packageName]
     * @param { string } [opts.receipt]
     * @returns { Promise<object> } Success
     */
    verifySubscription(opts?: {
        token?: string;
        sku: string;
        packageName?: string;
        receipt?: string;
    }): Promise<object>;
    /**
     * Defer a subscription payment
     * @param {object} [opts] - Named parameters
     * @param { string } opts.sku
     * @param { string } [opts.packageName]
     * @param { string } opts.athomId
     * @param { number } opts.quantity
     * @param { string } opts.duration  -  ("weeks" | "months" | "years")
     * @returns { Promise<object> } Success
     */
    deferSubscription(opts?: {
        sku: string;
        packageName?: string;
        athomId: string;
        quantity: number;
        duration: string;
    }): Promise<object>;
    /**
     * Get users that have an expired subscription
     * @param {object} [opts] - Named parameters
     * @param { string[] } opts.users
     * @param { string } opts.secret
     * @returns { Promise<object> } Success
     */
    getExpiredSubscriptions(opts?: {
        users: string[];
        secret: string;
    }): Promise<object>;
    /**
     * Get an authenticated user's offer
     * @param {object} [opts] - Named parameters
     * @param { string } opts.offerId
     * @returns { Promise<void> } OK
     */
    getOffer(opts?: {
        offerId: string;
    }): Promise<void>;
    /**
     * Redeem an authenticated user's offer
     * @param {object} [opts] - Named parameters
     * @param { string } opts.offerId
     * @param { string } opts.paymentProvider
     * @returns { Promise<void> } OK
     */
    redeemOffer(opts?: {
        offerId: string;
        paymentProvider: string;
    }): Promise<void>;
    /**
     * Create an offer coupon for Apple
     * @param {object} [opts] - Named parameters
     * @param { string } opts.secret
     * @param { string } opts.coupon
     * @param { string } opts.expiresAt
     * @param { string } opts.subscriptionType
     * @param { number } opts.subscriptionQuantity
     * @param { string } opts.subscriptionDuration
     * @returns { Promise<void> } OK
     */
    createOfferCouponApple(opts?: {
        secret: string;
        coupon: string;
        expiresAt: string;
        subscriptionType: string;
        subscriptionQuantity: number;
        subscriptionDuration: string;
    }): Promise<void>;
    /**
     * Get the authenticated user's offers
     * @param {object} [opts] - Named parameters
     * @returns { Promise<void> } OK
     */
    getOffers(opts?: any): Promise<void>;
    /**
     * Create an offer for a user
     * @param {object} [opts] - Named parameters
     * @param { string } opts.secret
     * @param { string } opts.userId
     * @param { string } opts.expiresAt
     * @param { string } opts.campaignId
     * @param { string } opts.subscriptionType
     * @param { number } opts.subscriptionQuantity
     * @param { string } opts.subscriptionDuration
     * @returns { Promise<void> } OK
     */
    createOffer(opts?: {
        secret: string;
        userId: string;
        expiresAt: string;
        campaignId: string;
        subscriptionType: string;
        subscriptionQuantity: number;
        subscriptionDuration: string;
    }): Promise<void>;
}

/**
 * Represents the Athom Weather API
 * @param {object} [opts] - An options object
 * @param {string} [opts.baseUrl] - A custom baseUrl
 * @protected
 */
declare class AthomWeatherAPI {
    constructor(opts?: {
        baseUrl?: string;
    });
    /**
     *
     * @param {object} [opts] - Named parameters
     * @param { string } opts.latitude
     * @param { string } opts.longitude
     * @param { string } opts.homey
     * @param { string } [opts.language]
     */
    getWeather(opts?: {
        latitude: string;
        longitude: string;
        homey: string;
        language?: string;
    }): void;
}

/**
 * Represents the Athom Webhooks API
 * @param {object} [opts] - An options object
 * @param {string} [opts.baseUrl] - A custom baseUrl
 * @protected
 */
declare class AthomWebhooksAPI {
    constructor(opts?: {
        baseUrl?: string;
    });
    /**
     * Get all Webhooks
     * @param {object} [opts] - Named parameters
     * @param { string } opts.token
     * @returns { Promise<AthomWebhooksAPI.Webhook[]> } Success
     */
    getWebhooks(opts?: {
        token: string;
    }): Promise<AthomWebhooksAPI.Webhook[]>;
    /**
     * Create a Webhook
     * @param {object} [opts] - Named parameters
     * @param { string } opts.token
     * @param { string } [opts.name]
     * @param { string } [opts.fn]
     * @param { string } [opts.keyPath]
     * @returns { Promise<AthomWebhooksAPI.Webhook> } Success
     */
    createWebhook(opts?: {
        token: string;
        name?: string;
        fn?: string;
        keyPath?: string;
    }): Promise<AthomWebhooksAPI.Webhook>;
    /**
     * Get a Webhook
     * @param {object} [opts] - Named parameters
     * @param { string } opts.token
     * @param { string } opts.webhookId
     * @returns { Promise<AthomWebhooksAPI.Webhook> } Success
     */
    getWebhook(opts?: {
        token: string;
        webhookId: string;
    }): Promise<AthomWebhooksAPI.Webhook>;
    /**
     * Update a Webhook
     * @param {object} [opts] - Named parameters
     * @param { string } opts.token
     * @param { string } opts.webhookId
     * @param { string } [opts.name]
     * @param { string } [opts.fn]
     * @param { string } [opts.keyPath]
     * @returns { Promise<AthomWebhooksAPI.Webhook> } Success
     */
    updateWebhook(opts?: {
        token: string;
        webhookId: string;
        name?: string;
        fn?: string;
        keyPath?: string;
    }): Promise<AthomWebhooksAPI.Webhook>;
    /**
     * Delete a Webhook
     * @param {object} [opts] - Named parameters
     * @param { string } opts.token
     * @param { string } opts.webhookId
     * @returns { Promise<void> } Success
     */
    deleteWebhook(opts?: {
        token: string;
        webhookId: string;
    }): Promise<void>;
    /**
     * Register a Webhook Client
     * @param {object} [opts] - Named parameters
     * @param { string } opts.webhookId
     * @param { string } opts.homeyId
     * @param { string } opts.secret  - The shared secret
     * @param { object } opts.data  - The client data to identify the client on runtime
     * @param { string } [opts.callbackUrl]  - The URL to notify when the webhook has been called
     * @returns { Promise<object> } Success
     */
    registerWebhookClient(opts?: {
        webhookId: string;
        homeyId: string;
        secret: string;
        data: any;
        callbackUrl?: string;
    }): Promise<object>;
    /**
     * Unrgister a Webhook Client
     * @param {object} [opts] - Named parameters
     * @param { string } opts.webhookId
     * @param { string } opts.homeyId
     * @returns { Promise<object> } Success
     */
    unregisterWebhookClient(opts?: {
        webhookId: string;
        homeyId: string;
    }): Promise<object>;
}

/**
 * A storage adapter is used to persist sessions.
 * It is possible to supply your own storage adapter by
 * extending this class and supplying an instance of it to the constructor of {{AthomCloudAPI}}.
 */
declare class AthomStorageAdapter {
    /**
     * This function should return the stored object or null
     * @returns {object}
     */
    get(): any;
    /**
     * This function should update the stored object
     * @param {object} value - the new value
     * @returns {object}
     */
    set(value: any): any;
}

declare namespace AthomStorageAdapter {
    /**
     *
     * @param {string} key The key to use in the local storage
     */
    class LocalStorage {
        constructor(key: string);
    }
}

/**
 * @class EventEmitter
 * @see {@link https://nodejs.org/api/events.html|Node.js EventEmitter}
 * @hideconstructor
 */
declare class EventEmitter {
}


//APPEND_MARKER
//This is appended to the types.d.ts to actually export stuff
export {
    HomeyAPI,
    AthomCloudAPI,
    AthomAppsAPI,
    AthomConnectAPI,
    AthomFirmwareAPI,
    AthomSetupAPI,
    AthomBackupAPI,
    AthomStorageAdapter,
  };


declare module AthomApi {
  const HomeyAPI: HomeyAPI;
  const AthomCloudAPI: AthomCloudAPI;
  const AthomAppsAPI: AthomAppsAPI;
  const AthomConnectAPI: AthomConnectAPI;
  const AthomFirmwareAPI: AthomFirmwareAPI;
  const AthomSetupAPI: AthomSetupAPI;
  const AthomBackupAPI: AthomBackupAPI;
  const AthomStorageAdapter: AthomStorageAdapter;
}
export default AthomApi;